
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.9
// timestamp : Mon Jan 24 09:42:21 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/rv64i_b.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the andn instruction of the RISC-V RV64B,RV64K,RV64Zbb,RV64Zbkb,RV64Zkn,RV64Zks extension for the andn covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IB,RV64IK,RV64IZbb,RV64IZbkb,RV64IZkn,RV64IZks")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*B.*);def TEST_CASE_1=True;",andn)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*RV64.*I.*Zbb.*);def TEST_CASE_1=True;",andn)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rd, rs1==x30, rs2==x30, rd==x31, rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 1, rs1_val > 0 and rs2_val > 0, rs1_val==4294967297 and rs2_val==1
// opcode: andn ; op1:x30; op2:x30; dest:x31; op1val:0x100000001;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x30, 0x100000001, 0x100000001, 0x100000001, x1, 0, x2)

inst_1:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x29, rd==x30, rs2_val == 9223372036854775807, 
// opcode: andn ; op1:x31; op2:x29; dest:x30; op1val:0x100000001;  op2val:0x7fffffffffffffff
TEST_RR_OP(andn, x30, x31, x29, 0x100000001, 0x100000001, 0x7fffffffffffffff, x1, 8, x2)

inst_2:
// rs1 == rd != rs2, rs1==x29, rs2==x31, rd==x29, rs2_val == 13835058055282163711, 
// opcode: andn ; op1:x29; op2:x31; dest:x29; op1val:0x100000001;  op2val:0xbfffffffffffffff
TEST_RR_OP(andn, x29, x29, x31, 0x100000001, 0x100000001, 0xbfffffffffffffff, x1, 16, x2)

inst_3:
// rs2 == rd != rs1, rs1==x27, rs2==x28, rd==x28, rs2_val == 16140901064495857663, 
// opcode: andn ; op1:x27; op2:x28; dest:x28; op1val:0x100000001;  op2val:0xdfffffffffffffff
TEST_RR_OP(andn, x28, x27, x28, 0x100000001, 0x100000001, 0xdfffffffffffffff, x1, 24, x2)

inst_4:
// rs1 == rs2 == rd, rs1==x26, rs2==x26, rd==x26, rs2_val == 17293822569102704639, 
// opcode: andn ; op1:x26; op2:x26; dest:x26; op1val:0x100000001;  op2val:0x100000001
TEST_RR_OP(andn, x26, x26, x26, 0x100000001, 0x100000001, 0x100000001, x1, 32, x2)

inst_5:
// rs1==x28, rs2==x25, rd==x27, rs2_val == 17870283321406128127, 
// opcode: andn ; op1:x28; op2:x25; dest:x27; op1val:0x100000001;  op2val:0xf7ffffffffffffff
TEST_RR_OP(andn, x27, x28, x25, 0x100000001, 0x100000001, 0xf7ffffffffffffff, x1, 40, x2)

inst_6:
// rs1==x24, rs2==x27, rd==x25, rs2_val == 18158513697557839871, 
// opcode: andn ; op1:x24; op2:x27; dest:x25; op1val:0x100000001;  op2val:0xfbffffffffffffff
TEST_RR_OP(andn, x25, x24, x27, 0x100000001, 0x100000001, 0xfbffffffffffffff, x1, 48, x2)

inst_7:
// rs1==x25, rs2==x23, rd==x24, rs2_val == 18302628885633695743, 
// opcode: andn ; op1:x25; op2:x23; dest:x24; op1val:0x100000001;  op2val:0xfdffffffffffffff
TEST_RR_OP(andn, x24, x25, x23, 0x100000001, 0x100000001, 0xfdffffffffffffff, x1, 56, x2)

inst_8:
// rs1==x22, rs2==x24, rd==x23, rs2_val == 18374686479671623679, 
// opcode: andn ; op1:x22; op2:x24; dest:x23; op1val:0x100000001;  op2val:0xfeffffffffffffff
TEST_RR_OP(andn, x23, x22, x24, 0x100000001, 0x100000001, 0xfeffffffffffffff, x1, 64, x2)

inst_9:
// rs1==x23, rs2==x21, rd==x22, rs2_val == 18410715276690587647, 
// opcode: andn ; op1:x23; op2:x21; dest:x22; op1val:0x100000001;  op2val:0xff7fffffffffffff
TEST_RR_OP(andn, x22, x23, x21, 0x100000001, 0x100000001, 0xff7fffffffffffff, x1, 72, x2)

inst_10:
// rs1==x20, rs2==x22, rd==x21, rs2_val == 18428729675200069631, 
// opcode: andn ; op1:x20; op2:x22; dest:x21; op1val:0x100000001;  op2val:0xffbfffffffffffff
TEST_RR_OP(andn, x21, x20, x22, 0x100000001, 0x100000001, 0xffbfffffffffffff, x1, 80, x2)

inst_11:
// rs1==x21, rs2==x19, rd==x20, rs2_val == 18437736874454810623, 
// opcode: andn ; op1:x21; op2:x19; dest:x20; op1val:0x100000001;  op2val:0xffdfffffffffffff
TEST_RR_OP(andn, x20, x21, x19, 0x100000001, 0x100000001, 0xffdfffffffffffff, x1, 88, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, rs2_val == 18442240474082181119, 
// opcode: andn ; op1:x18; op2:x20; dest:x19; op1val:0x100000001;  op2val:0xffefffffffffffff
TEST_RR_OP(andn, x19, x18, x20, 0x100000001, 0x100000001, 0xffefffffffffffff, x1, 96, x2)

inst_13:
// rs1==x19, rs2==x17, rd==x18, rs2_val == 18444492273895866367, 
// opcode: andn ; op1:x19; op2:x17; dest:x18; op1val:0x100000001;  op2val:0xfff7ffffffffffff
TEST_RR_OP(andn, x18, x19, x17, 0x100000001, 0x100000001, 0xfff7ffffffffffff, x1, 104, x2)

inst_14:
// rs1==x16, rs2==x18, rd==x17, rs2_val == 18445618173802708991, 
// opcode: andn ; op1:x16; op2:x18; dest:x17; op1val:0x100000001;  op2val:0xfffbffffffffffff
TEST_RR_OP(andn, x17, x16, x18, 0x100000001, 0x100000001, 0xfffbffffffffffff, x1, 112, x2)

inst_15:
// rs1==x17, rs2==x15, rd==x16, rs2_val == 18446181123756130303, 
// opcode: andn ; op1:x17; op2:x15; dest:x16; op1val:0x100000001;  op2val:0xfffdffffffffffff
TEST_RR_OP(andn, x16, x17, x15, 0x100000001, 0x100000001, 0xfffdffffffffffff, x1, 120, x2)

inst_16:
// rs1==x14, rs2==x16, rd==x15, rs2_val == 18446462598732840959, 
// opcode: andn ; op1:x14; op2:x16; dest:x15; op1val:0x100000001;  op2val:0xfffeffffffffffff
TEST_RR_OP(andn, x15, x14, x16, 0x100000001, 0x100000001, 0xfffeffffffffffff, x1, 128, x2)

inst_17:
// rs1==x15, rs2==x13, rd==x14, rs2_val == 18446603336221196287, 
// opcode: andn ; op1:x15; op2:x13; dest:x14; op1val:0x100000001;  op2val:0xffff7fffffffffff
TEST_RR_OP(andn, x14, x15, x13, 0x100000001, 0x100000001, 0xffff7fffffffffff, x1, 136, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, rs2_val == 18446673704965373951, 
// opcode: andn ; op1:x12; op2:x14; dest:x13; op1val:0x100000001;  op2val:0xffffbfffffffffff
TEST_RR_OP(andn, x13, x12, x14, 0x100000001, 0x100000001, 0xffffbfffffffffff, x1, 144, x2)

inst_19:
// rs1==x13, rs2==x11, rd==x12, rs2_val == 18446708889337462783, 
// opcode: andn ; op1:x13; op2:x11; dest:x12; op1val:0x100000001;  op2val:0xffffdfffffffffff
TEST_RR_OP(andn, x12, x13, x11, 0x100000001, 0x100000001, 0xffffdfffffffffff, x1, 152, x2)

inst_20:
// rs1==x10, rs2==x12, rd==x11, rs2_val == 18446726481523507199, 
// opcode: andn ; op1:x10; op2:x12; dest:x11; op1val:0x100000001;  op2val:0xffffefffffffffff
TEST_RR_OP(andn, x11, x10, x12, 0x100000001, 0x100000001, 0xffffefffffffffff, x1, 160, x2)

inst_21:
// rs1==x11, rs2==x9, rd==x10, rs2_val == 18446735277616529407, 
// opcode: andn ; op1:x11; op2:x9; dest:x10; op1val:0x100000001;  op2val:0xfffff7ffffffffff
TEST_RR_OP(andn, x10, x11, x9, 0x100000001, 0x100000001, 0xfffff7ffffffffff, x1, 168, x2)

inst_22:
// rs1==x8, rs2==x10, rd==x9, rs2_val == 18446739675663040511, 
// opcode: andn ; op1:x8; op2:x10; dest:x9; op1val:0x100000001;  op2val:0xfffffbffffffffff
TEST_RR_OP(andn, x9, x8, x10, 0x100000001, 0x100000001, 0xfffffbffffffffff, x1, 176, x2)

inst_23:
// rs1==x9, rs2==x7, rd==x8, rs2_val == 18446741874686296063, 
// opcode: andn ; op1:x9; op2:x7; dest:x8; op1val:0x100000001;  op2val:0xfffffdffffffffff
TEST_RR_OP(andn, x8, x9, x7, 0x100000001, 0x100000001, 0xfffffdffffffffff, x1, 184, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, rs2_val == 18446742974197923839, 
// opcode: andn ; op1:x6; op2:x8; dest:x7; op1val:0x100000001;  op2val:0xfffffeffffffffff
TEST_RR_OP(andn, x7, x6, x8, 0x100000001, 0x100000001, 0xfffffeffffffffff, x1, 192, x2)

inst_25:
// rs1==x7, rs2==x5, rd==x6, rs2_val == 18446743523953737727, 
// opcode: andn ; op1:x7; op2:x5; dest:x6; op1val:0x100000001;  op2val:0xffffff7fffffffff
TEST_RR_OP(andn, x6, x7, x5, 0x100000001, 0x100000001, 0xffffff7fffffffff, x1, 200, x8)
RVTEST_SIGBASE(x7,signature_x7_0)

inst_26:
// rs1==x4, rs2==x6, rd==x5, rs2_val == 18446743798831644671, 
// opcode: andn ; op1:x4; op2:x6; dest:x5; op1val:0x100000001;  op2val:0xffffffbfffffffff
TEST_RR_OP(andn, x5, x4, x6, 0x100000001, 0x100000001, 0xffffffbfffffffff, x7, 0, x8)

inst_27:
// rs1==x5, rs2==x3, rd==x4, rs2_val == 18446743936270598143, 
// opcode: andn ; op1:x5; op2:x3; dest:x4; op1val:0x100000001;  op2val:0xffffffdfffffffff
TEST_RR_OP(andn, x4, x5, x3, 0x100000001, 0x100000001, 0xffffffdfffffffff, x7, 8, x8)

inst_28:
// rs1==x2, rs2==x4, rd==x3, rs2_val == 18446744004990074879, 
// opcode: andn ; op1:x2; op2:x4; dest:x3; op1val:0x100000001;  op2val:0xffffffefffffffff
TEST_RR_OP(andn, x3, x2, x4, 0x100000001, 0x100000001, 0xffffffefffffffff, x7, 16, x8)

inst_29:
// rs1==x3, rs2==x1, rd==x2, rs2_val == 18446744039349813247, 
// opcode: andn ; op1:x3; op2:x1; dest:x2; op1val:0x100000001;  op2val:0xfffffff7ffffffff
TEST_RR_OP(andn, x2, x3, x1, 0x100000001, 0x100000001, 0xfffffff7ffffffff, x7, 24, x8)

inst_30:
// rs1==x0, rs2==x2, rd==x1, rs2_val == 18446744056529682431, 
// opcode: andn ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:0xfffffffbffffffff
TEST_RR_OP(andn, x1, x0, x2, 0x0, 0x0, 0xfffffffbffffffff, x7, 32, x8)

inst_31:
// rs1==x1, rs2_val == 18446744065119617023, 
// opcode: andn ; op1:x1; op2:x30; dest:x31; op1val:0x100000001;  op2val:0xfffffffdffffffff
TEST_RR_OP(andn, x31, x1, x30, 0x100000001, 0x100000001, 0xfffffffdffffffff, x7, 40, x8)

inst_32:
// rs2==x0, rs2_val == 18446744069414584319, 
// opcode: andn ; op1:x30; op2:x0; dest:x31; op1val:0x100000001;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x0, 0x0, 0x100000001, 0x0, x7, 48, x8)

inst_33:
// rd==x0, rs2_val == 18446744071562067967, 
// opcode: andn ; op1:x31; op2:x30; dest:x0; op1val:0x100000001;  op2val:0xffffffff7fffffff
TEST_RR_OP(andn, x0, x31, x30, 0, 0x100000001, 0xffffffff7fffffff, x7, 56, x8)

inst_34:
// rs2_val == 18446744072635809791, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffbfffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffbfffffff, x7, 64, x8)

inst_35:
// rs2_val == 18446744073172680703, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffdfffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffdfffffff, x7, 72, x8)

inst_36:
// rs2_val == 18446744073441116159, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffefffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffefffffff, x7, 80, x8)

inst_37:
// rs2_val == 18446744073575333887, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffff7ffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffff7ffffff, x7, 88, x8)

inst_38:
// rs2_val == 18446744073642442751, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffbffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffbffffff, x7, 96, x8)

inst_39:
// rs2_val == 18446744073675997183, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffdffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffdffffff, x7, 104, x8)

inst_40:
// rs2_val == 18446744073692774399, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffeffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffeffffff, x7, 112, x8)

inst_41:
// rs2_val == 18446744073701163007, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffff7fffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffff7fffff, x7, 120, x8)

inst_42:
// rs2_val == 18446744073705357311, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffbfffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffbfffff, x7, 128, x8)

inst_43:
// rs2_val == 18446744073707454463, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffdfffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffdfffff, x7, 136, x8)

inst_44:
// rs2_val == 18446744073708503039, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffefffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffefffff, x7, 144, x8)

inst_45:
// rs2_val == 18446744073709027327, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffff7ffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffff7ffff, x7, 152, x8)

inst_46:
// rs2_val == 18446744073709289471, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffbffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffbffff, x7, 160, x8)

inst_47:
// rs2_val == 18446744073709420543, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffdffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffdffff, x7, 168, x8)

inst_48:
// rs2_val == 18446744073709486079, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffeffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffeffff, x7, 176, x8)

inst_49:
// rs2_val == 18446744073709518847, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffff7fff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffff7fff, x7, 184, x8)

inst_50:
// rs2_val == 18446744073709535231, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffbfff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffbfff, x7, 192, x8)

inst_51:
// rs2_val == 18446744073709543423, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffdfff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffdfff, x7, 200, x8)

inst_52:
// rs2_val == 18446744073709547519, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffefff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffefff, x7, 208, x8)

inst_53:
// rs2_val == 18446744073709549567, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffff7ff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffff7ff, x7, 216, x8)

inst_54:
// rs2_val == 18446744073709550591, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffffbff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffffbff, x7, 224, x8)

inst_55:
// rs2_val == 18446744073709551103, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffffdff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffffdff, x7, 232, x8)

inst_56:
// rs2_val == 18446744073709551359, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffffeff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffffeff, x7, 240, x8)

inst_57:
// rs2_val == 18446744073709551487, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffff7f
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffff7f, x7, 248, x8)

inst_58:
// rs2_val == 18446744073709551551, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffffbf
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffffbf, x7, 256, x8)

inst_59:
// rs2_val == 18446744073709551583, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffffdf
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffffdf, x7, 264, x8)

inst_60:
// rs2_val == 18446744073709551599, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffffef
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffffef, x7, 272, x8)

inst_61:
// rs2_val == 18446744073709551607, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffffff7
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffffff7, x7, 280, x8)

inst_62:
// rs2_val == 18446744073709551611, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffffffb
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffffffb, x7, 288, x8)

inst_63:
// rs2_val == 18446744073709551613, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffffffd
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffffffffffd, x7, 296, x8)

inst_64:
// rs2_val == 18446744073709551614, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffffffffffe
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000001, 0xfffffffffffffffe, x7, 304, x8)

inst_65:
// rs1_val == 9223372036854775807, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x7fffffffffffffff, 0x100000001, x7, 312, x8)

inst_66:
// rs1_val == 13835058055282163711, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xbfffffffffffffff, 0x100000001, x7, 320, x8)

inst_67:
// rs1_val == 16140901064495857663, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xdfffffffffffffff, 0x100000001, x7, 328, x8)

inst_68:
// rs1_val == 17293822569102704639, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xefffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xefffffffffffffff, 0x100000001, x7, 336, x8)

inst_69:
// rs1_val == 17870283321406128127, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xf7ffffffffffffff, 0x100000001, x7, 344, x8)

inst_70:
// rs1_val == 18158513697557839871, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfbffffffffffffff, 0x100000001, x7, 352, x8)

inst_71:
// rs1_val == 18302628885633695743, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfdffffffffffffff, 0x100000001, x7, 360, x8)

inst_72:
// rs1_val == 18374686479671623679, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfeffffffffffffff, 0x100000001, x7, 368, x8)

inst_73:
// rs1_val == 18410715276690587647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xff7fffffffffffff, 0x100000001, x7, 376, x8)

inst_74:
// rs1_val == 18428729675200069631, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffbfffffffffffff, 0x100000001, x7, 384, x8)

inst_75:
// rs1_val == 18437736874454810623, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffdfffffffffffff, 0x100000001, x7, 392, x8)

inst_76:
// rs1_val == 18442240474082181119, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffefffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffefffffffffffff, 0x100000001, x7, 400, x8)

inst_77:
// rs1_val == 18444492273895866367, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfff7ffffffffffff, 0x100000001, x7, 408, x8)

inst_78:
// rs1_val == 18445618173802708991, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffbffffffffffff, 0x100000001, x7, 416, x8)

inst_79:
// rs1_val == 18446181123756130303, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffdffffffffffff, 0x100000001, x7, 424, x8)

inst_80:
// rs1_val == 18446462598732840959, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffeffffffffffff, 0x100000001, x7, 432, x8)

inst_81:
// rs1_val == 18446603336221196287, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffff7fffffffffff, 0x100000001, x7, 440, x8)

inst_82:
// rs1_val == 18446673704965373951, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffbfffffffffff, 0x100000001, x7, 448, x8)

inst_83:
// rs1_val == 18446708889337462783, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffdfffffffffff, 0x100000001, x7, 456, x8)

inst_84:
// rs1_val == 18446726481523507199, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffefffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffefffffffffff, 0x100000001, x7, 464, x8)

inst_85:
// rs1_val == 18446735277616529407, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffff7ffffffffff, 0x100000001, x7, 472, x8)

inst_86:
// rs1_val == 18446739675663040511, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffbffffffffff, 0x100000001, x7, 480, x8)

inst_87:
// rs1_val == 18446741874686296063, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffdffffffffff, 0x100000001, x7, 488, x8)

inst_88:
// rs1_val == 18446742974197923839, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffeffffffffff, 0x100000001, x7, 496, x8)

inst_89:
// rs1_val == 18446743523953737727, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7fffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffff7fffffffff, 0x100000001, x7, 504, x8)

inst_90:
// rs1_val == 18446743798831644671, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbfffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffbfffffffff, 0x100000001, x7, 512, x8)

inst_91:
// rs1_val == 18446743936270598143, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdfffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffdfffffffff, 0x100000001, x7, 520, x8)

inst_92:
// rs1_val == 18446744004990074879, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffefffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffefffffffff, 0x100000001, x7, 528, x8)

inst_93:
// rs1_val == 18446744039349813247, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7ffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffff7ffffffff, 0x100000001, x7, 536, x8)

inst_94:
// rs1_val == 18446744056529682431, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffbffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffbffffffff, 0x100000001, x7, 544, x8)

inst_95:
// rs1_val == 18446744065119617023, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffdffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffdffffffff, 0x100000001, x7, 552, x8)

inst_96:
// rs1_val == 18446744069414584319, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffeffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xfffffffeffffffff, 0x100000001, x7, 560, x8)

inst_97:
// rs1_val == 18446744071562067967, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff7fffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffff7fffffff, 0x100000001, x7, 568, x8)

inst_98:
// rs1_val == 18446744072635809791, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffbfffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffbfffffff, 0x100000001, x7, 576, x8)

inst_99:
// rs1_val == 18446744073172680703, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffdfffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffdfffffff, 0x100000001, x7, 584, x8)

inst_100:
// rs1_val == 18446744073441116159, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffefffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffefffffff, 0x100000001, x7, 592, x8)

inst_101:
// rs1_val == 18446744073575333887, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffff7ffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffff7ffffff, 0x100000001, x7, 600, x8)

inst_102:
// rs1_val == 18446744073642442751, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffbffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffbffffff, 0x100000001, x7, 608, x8)

inst_103:
// rs1_val == 18446744073675997183, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffdffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffdffffff, 0x100000001, x7, 616, x8)

inst_104:
// rs1_val == 18446744073692774399, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffeffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffeffffff, 0x100000001, x7, 624, x8)

inst_105:
// rs1_val == 18446744073701163007, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffff7fffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffff7fffff, 0x100000001, x7, 632, x8)

inst_106:
// rs1_val == 18446744073705357311, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffbfffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffbfffff, 0x100000001, x7, 640, x8)

inst_107:
// rs1_val == 18446744073707454463, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffdfffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffdfffff, 0x100000001, x7, 648, x8)

inst_108:
// rs1_val == 18446744073708503039, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffefffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffefffff, 0x100000001, x7, 656, x8)

inst_109:
// rs1_val == 18446744073709027327, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffff7ffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffff7ffff, 0x100000001, x7, 664, x8)

inst_110:
// rs1_val == 18446744073709289471, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffbffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffbffff, 0x100000001, x7, 672, x8)

inst_111:
// rs1_val == 18446744073709420543, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffdffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffdffff, 0x100000001, x7, 680, x8)

inst_112:
// rs1_val == 18446744073709486079, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffeffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffeffff, 0x100000001, x7, 688, x8)

inst_113:
// rs1_val == 18446744073709518847, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffff7fff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffff7fff, 0x100000001, x7, 696, x8)

inst_114:
// rs1_val == 18446744073709535231, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffbfff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffbfff, 0x100000001, x7, 704, x8)

inst_115:
// rs1_val == 18446744073709543423, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffdfff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffdfff, 0x100000001, x7, 712, x8)

inst_116:
// rs1_val == 18446744073709547519, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffefff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffefff, 0x100000001, x7, 720, x8)

inst_117:
// rs1_val == 18446744073709549567, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffff7ff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffff7ff, 0x100000001, x7, 728, x8)

inst_118:
// rs1_val == 18446744073709550591, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffbff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffffbff, 0x100000001, x7, 736, x8)

inst_119:
// rs1_val == 18446744073709551103, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffdff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffffdff, 0x100000001, x7, 744, x8)

inst_120:
// rs1_val == 18446744073709551359, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffeff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffffeff, 0x100000001, x7, 752, x8)

inst_121:
// rs1_val == 18446744073709551487, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffff7f;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffff7f, 0x100000001, x7, 760, x8)

inst_122:
// rs1_val == 18446744073709551551, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffbf;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffffbf, 0x100000001, x7, 768, x8)

inst_123:
// rs1_val == 18446744073709551583, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffdf;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffffdf, 0x100000001, x7, 776, x8)

inst_124:
// rs1_val == 18446744073709551599, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffef;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffffef, 0x100000001, x7, 784, x8)

inst_125:
// rs1_val == 18446744073709551607, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffff7;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffffff7, 0x100000001, x7, 792, x8)

inst_126:
// rs1_val == 18446744073709551611, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffb;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffffffb, 0x100000001, x7, 800, x8)

inst_127:
// rs1_val == 18446744073709551613, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffd;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xfffffffffffffffd, 0x100000001, x7, 808, x8)

inst_128:
// rs1_val == 18446744073709551614, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffffffffffe;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0xfffffffffffffffe, 0x100000001, x7, 816, x8)

inst_129:
// rs2_val == 9223372036854775808, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x8000000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x8000000000000000, x7, 824, x8)

inst_130:
// rs2_val == 4611686018427387904, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x4000000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x4000000000000000, x7, 832, x8)

inst_131:
// rs2_val == 2305843009213693952, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x2000000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x2000000000000000, x7, 840, x8)

inst_132:
// rs2_val == 1152921504606846976, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x1000000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x1000000000000000, x7, 848, x8)

inst_133:
// rs2_val == 576460752303423488, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x800000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x800000000000000, x7, 856, x8)

inst_134:
// rs2_val == 288230376151711744, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x400000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x400000000000000, x7, 864, x8)

inst_135:
// rs2_val == 144115188075855872, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x200000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x200000000000000, x7, 872, x8)

inst_136:
// rs2_val == 72057594037927936, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x100000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x100000000000000, x7, 880, x8)

inst_137:
// rs2_val == 36028797018963968, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x80000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x80000000000000, x7, 888, x8)

inst_138:
// rs2_val == 18014398509481984, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x40000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x40000000000000, x7, 896, x8)

inst_139:
// rs2_val == 9007199254740992, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x20000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x20000000000000, x7, 904, x8)

inst_140:
// rs2_val == 4503599627370496, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x10000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x10000000000000, x7, 912, x8)

inst_141:
// rs2_val == 2251799813685248, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x8000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x8000000000000, x7, 920, x8)

inst_142:
// rs2_val == 1125899906842624, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x4000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x4000000000000, x7, 928, x8)

inst_143:
// rs2_val == 562949953421312, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x2000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x2000000000000, x7, 936, x8)

inst_144:
// rs2_val == 281474976710656, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x1000000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x1000000000000, x7, 944, x8)

inst_145:
// rs2_val == 140737488355328, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x800000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x800000000000, x7, 952, x8)

inst_146:
// rs2_val == 70368744177664, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x400000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x400000000000, x7, 960, x8)

inst_147:
// rs2_val == 35184372088832, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x200000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x200000000000, x7, 968, x8)

inst_148:
// rs2_val == 17592186044416, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x100000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x100000000000, x7, 976, x8)

inst_149:
// rs2_val == 8796093022208, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x80000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x80000000000, x7, 984, x8)

inst_150:
// rs2_val == 4398046511104, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x40000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x40000000000, x7, 992, x8)

inst_151:
// rs2_val == 2199023255552, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x20000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x20000000000, x7, 1000, x8)

inst_152:
// rs2_val == 1099511627776, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x10000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x10000000000, x7, 1008, x8)

inst_153:
// rs2_val == 549755813888, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x8000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x8000000000, x7, 1016, x8)

inst_154:
// rs2_val == 274877906944, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x4000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x4000000000, x7, 1024, x8)

inst_155:
// rs2_val == 137438953472, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x2000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x2000000000, x7, 1032, x8)

inst_156:
// rs2_val == 68719476736, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x1000000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x1000000000, x7, 1040, x8)

inst_157:
// rs2_val == 34359738368, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x800000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x800000000, x7, 1048, x8)

inst_158:
// rs2_val == 17179869184, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x400000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x400000000, x7, 1056, x8)

inst_159:
// rs2_val == 8589934592, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x200000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x200000000, x7, 1064, x8)

inst_160:
// rs2_val == 4294967296, rs1_val==4294967297 and rs2_val==4294967296
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000001, 0x100000000, x7, 1072, x8)

inst_161:
// rs2_val == 2147483648, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x80000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x80000000, x7, 1080, x8)

inst_162:
// rs2_val == 1073741824, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x40000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x40000000, x7, 1088, x8)

inst_163:
// rs2_val == 536870912, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x20000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x20000000, x7, 1096, x8)

inst_164:
// rs2_val == 268435456, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x10000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x10000000, x7, 1104, x8)

inst_165:
// rs2_val == 134217728, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x8000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x8000000, x7, 1112, x8)

inst_166:
// rs2_val == 67108864, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x4000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x4000000, x7, 1120, x8)

inst_167:
// rs2_val == 33554432, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x2000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x2000000, x7, 1128, x8)

inst_168:
// rs2_val == 16777216, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x1000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x1000000, x7, 1136, x8)

inst_169:
// rs2_val == 8388608, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x800000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x800000, x7, 1144, x8)

inst_170:
// rs2_val == 4194304, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x400000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x400000, x7, 1152, x8)

inst_171:
// rs2_val == 2097152, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x200000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x200000, x7, 1160, x8)

inst_172:
// rs2_val == 1048576, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x100000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x100000, x7, 1168, x8)

inst_173:
// rs2_val == 524288, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x80000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x80000, x7, 1176, x8)

inst_174:
// rs2_val == 262144, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x40000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x40000, x7, 1184, x8)

inst_175:
// rs2_val == 131072, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x20000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x20000, x7, 1192, x8)

inst_176:
// rs2_val == 65536, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x10000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x10000, x7, 1200, x8)

inst_177:
// rs2_val == 32768, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x8000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x8000, x7, 1208, x8)

inst_178:
// rs2_val == 16384, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x4000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x4000, x7, 1216, x8)

inst_179:
// rs2_val == 8192, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x2000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x2000, x7, 1224, x8)

inst_180:
// rs2_val == 4096, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x1000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x1000, x7, 1232, x8)

inst_181:
// rs2_val == 2048, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x800
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x800, x7, 1240, x8)

inst_182:
// rs2_val == 1024, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x400
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x400, x7, 1248, x8)

inst_183:
// rs2_val == 512, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x200
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x200, x7, 1256, x8)

inst_184:
// rs2_val == 256, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x100
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x100, x7, 1264, x8)

inst_185:
// rs2_val == 128, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x80
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x80, x7, 1272, x8)

inst_186:
// rs2_val == 64, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x40
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x40, x7, 1280, x8)

inst_187:
// rs2_val == 32, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x20
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x20, x7, 1288, x8)

inst_188:
// rs2_val == 16, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x10
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x10, x7, 1296, x8)

inst_189:
// rs2_val == 8, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x8
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x8, x7, 1304, x8)

inst_190:
// rs2_val == 4, rs1_val==4294967297 and rs2_val==4
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x4, x7, 1312, x8)

inst_191:
// rs2_val == 2, rs1_val==4294967297 and rs2_val==2
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x2, x7, 1320, x8)

inst_192:
// rs1_val == 9223372036854775808, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x8000000000000000, 0x100000001, x7, 1328, x8)

inst_193:
// rs1_val == 4611686018427387904, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4000000000000000, 0x100000001, x7, 1336, x8)

inst_194:
// rs1_val == 2305843009213693952, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2000000000000000, 0x100000001, x7, 1344, x8)

inst_195:
// rs1_val == 1152921504606846976, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1000000000000000, 0x100000001, x7, 1352, x8)

inst_196:
// rs1_val == 576460752303423488, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x800000000000000, 0x100000001, x7, 1360, x8)

inst_197:
// rs1_val == 288230376151711744, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x400000000000000, 0x100000001, x7, 1368, x8)

inst_198:
// rs1_val == 144115188075855872, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x200000000000000, 0x100000001, x7, 1376, x8)

inst_199:
// rs1_val == 72057594037927936, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000000000, 0x100000001, x7, 1384, x8)

inst_200:
// rs1_val == 36028797018963968, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x80000000000000, 0x100000001, x7, 1392, x8)

inst_201:
// rs1_val == 18014398509481984, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x40000000000000, 0x100000001, x7, 1400, x8)

inst_202:
// rs1_val == 9007199254740992, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x20000000000000, 0x100000001, x7, 1408, x8)

inst_203:
// rs1_val == 4503599627370496, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x10000000000000, 0x100000001, x7, 1416, x8)

inst_204:
// rs1_val == 2251799813685248, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x8000000000000, 0x100000001, x7, 1424, x8)

inst_205:
// rs1_val == 1125899906842624, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4000000000000, 0x100000001, x7, 1432, x8)

inst_206:
// rs1_val == 562949953421312, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2000000000000, 0x100000001, x7, 1440, x8)

inst_207:
// rs1_val == 281474976710656, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1000000000000, 0x100000001, x7, 1448, x8)

inst_208:
// rs1_val == 140737488355328, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x800000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x800000000000, 0x100000001, x7, 1456, x8)

inst_209:
// rs1_val == 70368744177664, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x400000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x400000000000, 0x100000001, x7, 1464, x8)

inst_210:
// rs1_val == 35184372088832, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x200000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x200000000000, 0x100000001, x7, 1472, x8)

inst_211:
// rs1_val == 17592186044416, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000000, 0x100000001, x7, 1480, x8)

inst_212:
// rs1_val == 8796093022208, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x80000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x80000000000, 0x100000001, x7, 1488, x8)

inst_213:
// rs1_val == 4398046511104, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x40000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x40000000000, 0x100000001, x7, 1496, x8)

inst_214:
// rs1_val == 2199023255552, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x20000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x20000000000, 0x100000001, x7, 1504, x8)

inst_215:
// rs1_val == 1099511627776, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x10000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x10000000000, 0x100000001, x7, 1512, x8)

inst_216:
// rs1_val == 549755813888, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x8000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x8000000000, 0x100000001, x7, 1520, x8)

inst_217:
// rs1_val == 274877906944, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4000000000, 0x100000001, x7, 1528, x8)

inst_218:
// rs1_val == 137438953472, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2000000000, 0x100000001, x7, 1536, x8)

inst_219:
// rs1_val == 68719476736, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1000000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1000000000, 0x100000001, x7, 1544, x8)

inst_220:
// rs1_val == 34359738368, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x800000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x800000000, 0x100000001, x7, 1552, x8)

inst_221:
// rs1_val == 17179869184, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x400000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x400000000, 0x100000001, x7, 1560, x8)

inst_222:
// rs1_val == 8589934592, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x200000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x200000000, 0x100000001, x7, 1568, x8)

inst_223:
// rs1_val == 4294967296, rs1_val==4294967296 and rs2_val==4294967297
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x100000001, x7, 1576, x8)

inst_224:
// rs1_val == 2147483648, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x80000000, 0x100000001, x7, 1584, x8)

inst_225:
// rs1_val == 1073741824, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x40000000, 0x100000001, x7, 1592, x8)

inst_226:
// rs1_val == 536870912, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x20000000, 0x100000001, x7, 1600, x8)

inst_227:
// rs1_val == 268435456, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x10000000, 0x100000001, x7, 1608, x8)

inst_228:
// rs1_val == 134217728, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x8000000, 0x100000001, x7, 1616, x8)

inst_229:
// rs1_val == 67108864, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4000000, 0x100000001, x7, 1624, x8)

inst_230:
// rs1_val == 33554432, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2000000, 0x100000001, x7, 1632, x8)

inst_231:
// rs1_val == 16777216, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1000000, 0x100000001, x7, 1640, x8)

inst_232:
// rs1_val == 8388608, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x800000, 0x100000001, x7, 1648, x8)

inst_233:
// rs1_val == 4194304, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x400000, 0x100000001, x7, 1656, x8)

inst_234:
// rs1_val == 2097152, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x200000, 0x100000001, x7, 1664, x8)

inst_235:
// rs1_val == 1048576, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000, 0x100000001, x7, 1672, x8)

inst_236:
// rs1_val == 524288, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x80000, 0x100000001, x7, 1680, x8)

inst_237:
// rs1_val == 262144, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x40000, 0x100000001, x7, 1688, x8)

inst_238:
// rs1_val == 131072, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x20000, 0x100000001, x7, 1696, x8)

inst_239:
// rs1_val == 65536, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x10000, 0x100000001, x7, 1704, x8)

inst_240:
// rs1_val == 32768, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x8000, 0x100000001, x7, 1712, x8)

inst_241:
// rs1_val == 16384, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4000, 0x100000001, x7, 1720, x8)

inst_242:
// rs1_val == 8192, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2000, 0x100000001, x7, 1728, x8)

inst_243:
// rs1_val == 4096, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1000, 0x100000001, x7, 1736, x8)

inst_244:
// rs1_val == 2048, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x800, 0x100000001, x7, 1744, x8)

inst_245:
// rs1_val == 1024, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x400, 0x100000001, x7, 1752, x8)

inst_246:
// rs1_val == 512, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x200, 0x100000001, x7, 1760, x8)

inst_247:
// rs1_val == 256, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100, 0x100000001, x7, 1768, x8)

inst_248:
// rs1_val == 128, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x80, 0x100000001, x7, 1776, x8)

inst_249:
// rs1_val == 64, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x40, 0x100000001, x7, 1784, x8)

inst_250:
// rs1_val == 32, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x20, 0x100000001, x7, 1792, x8)

inst_251:
// rs1_val == 16, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x10, 0x100000001, x7, 1800, x8)

inst_252:
// rs1_val == 8, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x8, 0x100000001, x7, 1808, x8)

inst_253:
// rs1_val == 4, rs1_val==4 and rs2_val==4294967297
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x100000001, x7, 1816, x8)

inst_254:
// rs1_val == 2, rs1_val==2 and rs2_val==4294967297
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x100000001, x7, 1824, x8)

inst_255:
// rs1_val == 1, rs1_val==1 and rs2_val==4294967297
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x100000001, x7, 1832, x8)

inst_256:
// rs1_val == 0x6af29145404fd8ed and rs2_val == 0x990e75eafff569c2 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6af29145404fd8ed;  op2val:0x990e75eafff569c2
TEST_RR_OP(andn, x31, x30, x29, 0x8021140404548c0, 0x6af29145404fd8ed, 0x990e75eafff569c2, x7, 1840, x8)

inst_257:
// rs1_val == 0x6d23c0488a6019c1 and rs2_val == 0x860bdaad7447a088 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6d23c0488a6019c1;  op2val:0x860bdaad7447a088
TEST_RR_OP(andn, x31, x30, x29, 0x403c00800400080, 0x6d23c0488a6019c1, 0x860bdaad7447a088, x7, 1848, x8)

inst_258:
// rs1_val == 0x1f7d946f17168ab3 and rs2_val == 0x66eae3d9bbb4f560 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1f7d946f17168ab3;  op2val:0x66eae3d9bbb4f560
TEST_RR_OP(andn, x31, x30, x29, 0x668804913148020, 0x1f7d946f17168ab3, 0x66eae3d9bbb4f560, x7, 1856, x8)

inst_259:
// rs1_val == 0xef1d54db32b81f27 and rs2_val == 0x1826a804284fe16c 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xef1d54db32b81f27;  op2val:0x1826a804284fe16c
TEST_RR_OP(andn, x31, x30, x29, 0x804000020080124, 0xef1d54db32b81f27, 0x1826a804284fe16c, x7, 1864, x8)

inst_260:
// rs1_val == 0xb694de26ad9e5431 and rs2_val == 0x293f9f6071fad878 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb694de26ad9e5431;  op2val:0x293f9f6071fad878
TEST_RR_OP(andn, x31, x30, x29, 0x20149e20219a5030, 0xb694de26ad9e5431, 0x293f9f6071fad878, x7, 1872, x8)

inst_261:
// rs1_val == 0x987daa20b858e304 and rs2_val == 0x1aa1beebefb902cb 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x987daa20b858e304;  op2val:0x1aa1beebefb902cb
TEST_RR_OP(andn, x31, x30, x29, 0x1821aa20a8180200, 0x987daa20b858e304, 0x1aa1beebefb902cb, x7, 1880, x8)

inst_262:
// rs1_val == 0x79bb7c341d3110bc and rs2_val == 0x8678f5e3d272e229 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x79bb7c341d3110bc;  op2val:0x8678f5e3d272e229
TEST_RR_OP(andn, x31, x30, x29, 0x38742010300028, 0x79bb7c341d3110bc, 0x8678f5e3d272e229, x7, 1888, x8)

inst_263:
// rs1_val == 0xe2eaf4a09869be8c and rs2_val == 0x5b730cad91766f62 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xe2eaf4a09869be8c;  op2val:0x5b730cad91766f62
TEST_RR_OP(andn, x31, x30, x29, 0x426204a090602e00, 0xe2eaf4a09869be8c, 0x5b730cad91766f62, x7, 1896, x8)

inst_264:
// rs1_val == 0xc0fe15dd0df9564b and rs2_val == 0xb22bbf7eb4c858fb 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xc0fe15dd0df9564b;  op2val:0xb22bbf7eb4c858fb
TEST_RR_OP(andn, x31, x30, x29, 0x802a155c04c8504b, 0xc0fe15dd0df9564b, 0xb22bbf7eb4c858fb, x7, 1904, x8)

inst_265:
// rs1_val == 0x4113ee60952acffe and rs2_val == 0x53a66ed1dc80d916 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4113ee60952acffe;  op2val:0x53a66ed1dc80d916
TEST_RR_OP(andn, x31, x30, x29, 0x41026e409400c916, 0x4113ee60952acffe, 0x53a66ed1dc80d916, x7, 1912, x8)

inst_266:
// rs1_val == 0x40a5ff526f38a9c7 and rs2_val == 0xb6f9706fb4f741aa 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x40a5ff526f38a9c7;  op2val:0xb6f9706fb4f741aa
TEST_RR_OP(andn, x31, x30, x29, 0xa1704224300182, 0x40a5ff526f38a9c7, 0xb6f9706fb4f741aa, x7, 1920, x8)

inst_267:
// rs1_val == 0x9bedfe390d6ddd9d and rs2_val == 0xd05668ae0fdb82bc 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x9bedfe390d6ddd9d;  op2val:0xd05668ae0fdb82bc
TEST_RR_OP(andn, x31, x30, x29, 0x904468280d49809c, 0x9bedfe390d6ddd9d, 0xd05668ae0fdb82bc, x7, 1928, x8)

inst_268:
// rs1_val == 0xd75739f82ac177c6 and rs2_val == 0xaa6bb2bde9ed477d 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xd75739f82ac177c6;  op2val:0xaa6bb2bde9ed477d
TEST_RR_OP(andn, x31, x30, x29, 0x824330b828c14744, 0xd75739f82ac177c6, 0xaa6bb2bde9ed477d, x7, 1936, x8)

inst_269:
// rs1_val == 0x9a4e9ef10171f4df and rs2_val == 0x299c3bcf90efb625 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x9a4e9ef10171f4df;  op2val:0x299c3bcf90efb625
TEST_RR_OP(andn, x31, x30, x29, 0x80c1ac10061b405, 0x9a4e9ef10171f4df, 0x299c3bcf90efb625, x7, 1944, x8)

inst_270:
// rs1_val == 0xd169a3f8cad5e297 and rs2_val == 0x1fc493caa371db42 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xd169a3f8cad5e297;  op2val:0x1fc493caa371db42
TEST_RR_OP(andn, x31, x30, x29, 0x114083c88251c202, 0xd169a3f8cad5e297, 0x1fc493caa371db42, x7, 1952, x8)

inst_271:
// rs1_val == 0xd5b9fe5cf69bdcf3 and rs2_val == 0xf4c30307672f666d 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xd5b9fe5cf69bdcf3;  op2val:0xf4c30307672f666d
TEST_RR_OP(andn, x31, x30, x29, 0xd4810204660b4461, 0xd5b9fe5cf69bdcf3, 0xf4c30307672f666d, x7, 1960, x8)

inst_272:
// rs1_val == 0xe4921bf73047c198 and rs2_val == 0xa0569d765ebc64cb 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xe4921bf73047c198;  op2val:0xa0569d765ebc64cb
TEST_RR_OP(andn, x31, x30, x29, 0xa012197610044088, 0xe4921bf73047c198, 0xa0569d765ebc64cb, x7, 1968, x8)

inst_273:
// rs1_val == 0xfcc1b543c49cd65b and rs2_val == 0x2daf9ac7f5faf207 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xfcc1b543c49cd65b;  op2val:0x2daf9ac7f5faf207
TEST_RR_OP(andn, x31, x30, x29, 0x2c819043c498d203, 0xfcc1b543c49cd65b, 0x2daf9ac7f5faf207, x7, 1976, x8)

inst_274:
// rs1_val == 0x436f40f274b8de87 and rs2_val == 0x3459294ef273b44c 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x436f40f274b8de87;  op2val:0x3459294ef273b44c
TEST_RR_OP(andn, x31, x30, x29, 0x49004270309404, 0x436f40f274b8de87, 0x3459294ef273b44c, x7, 1984, x8)

inst_275:
// rs1_val == 0x75a3adb3254a9493 and rs2_val == 0xc5521660f3a3c571 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x75a3adb3254a9493;  op2val:0xc5521660f3a3c571
TEST_RR_OP(andn, x31, x30, x29, 0x4502042021028411, 0x75a3adb3254a9493, 0xc5521660f3a3c571, x7, 1992, x8)

inst_276:
// rs1_val==4294967297 and rs2_val==4294967297, rs1_val == rs2_val and rs1_val > 0 and rs2_val > 0
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0x100000001, x7, 2000, x8)

inst_277:
// rs1_val==4294967297 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0xb504f334, x7, 2008, x8)

inst_278:
// rs1_val==4294967297 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0x6666666666666667, x7, 2016, x8)

inst_279:
// rs1_val==4294967297 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000001, 0x3333333333333334, x7, 2024, x8)

inst_280:
// rs1_val==4294967297 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x6, x7, 2032, x8)

inst_281:
// rs1_val==4294967297 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0xaaaaaaaaaaaaaaab, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_1)

inst_282:
// rs1_val==4294967297 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000001, 0x5555555555555556, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_2)

inst_283:
// rs1_val==4294967297 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0xffffffff, x7, 0, x8)

inst_284:
// rs1_val==4294967297 and rs2_val==0, rs2_val == 0
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x0, x7, 8, x8)

inst_285:
// rs1_val==4294967297 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0xb504f332, x7, 16, x8)

inst_286:
// rs1_val==4294967297 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0x6666666666666665, x7, 24, x8)

inst_287:
// rs1_val==4294967297 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000001, 0x3333333333333332, x7, 32, x8)

inst_288:
// rs1_val==4294967297 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0xaaaaaaaaaaaaaaa9, x7, 40, x8)

inst_289:
// rs1_val==4294967297 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000001, 0x5555555555555554, x7, 48, x8)

inst_290:
// rs1_val==4294967297 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0xb504f333, x7, 56, x8)

inst_291:
// rs1_val==4294967297 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0x6666666666666666, x7, 64, x8)

inst_292:
// rs1_val==4294967297 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0x3333333333333333, x7, 72, x8)

inst_293:
// rs1_val==4294967297 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0x5, x7, 80, x8)

inst_294:
// rs1_val==4294967297 and rs2_val==12297829382473034410, rs2_val == 12297829382473034410
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000001, 0xaaaaaaaaaaaaaaaa, x7, 88, x8)

inst_295:
// rs1_val==4294967297 and rs2_val==6148914691236517205, rs2_val == 6148914691236517205
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0x5555555555555555, x7, 96, x8)

inst_296:
// rs1_val==4294967297 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0x3, x7, 104, x8)

inst_297:
// rs1_val==1 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x1, x7, 112, x8)

inst_298:
// rs1_val==1 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0xb504f334, x7, 120, x8)

inst_299:
// rs1_val==1 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x6666666666666667, x7, 128, x8)

inst_300:
// rs1_val==1 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x3333333333333334, x7, 136, x8)

inst_301:
// rs1_val==1 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x6, x7, 144, x8)

inst_302:
// rs1_val==1 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0xaaaaaaaaaaaaaaab, x7, 152, x8)

inst_303:
// rs1_val==1 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x5555555555555556, x7, 160, x8)

inst_304:
// rs1_val==1 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x4, x7, 168, x8)

inst_305:
// rs1_val==1 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0xffffffff, x7, 176, x8)

inst_306:
// rs1_val==1 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x0, x7, 184, x8)

inst_307:
// rs1_val==1 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0xb504f332, x7, 192, x8)

inst_308:
// rs1_val==1 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x6666666666666665, x7, 200, x8)

inst_309:
// rs1_val==1 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x3333333333333332, x7, 208, x8)

inst_310:
// rs1_val==1 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0xaaaaaaaaaaaaaaa9, x7, 216, x8)

inst_311:
// rs1_val==1 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x5555555555555554, x7, 224, x8)

inst_312:
// rs1_val==1 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x2, x7, 232, x8)

inst_313:
// rs1_val==1 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x100000000, x7, 240, x8)

inst_314:
// rs1_val==1 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0xb504f333, x7, 248, x8)

inst_315:
// rs1_val==1 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0x6666666666666666, x7, 256, x8)

inst_316:
// rs1_val==1 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x3333333333333333, x7, 264, x8)

inst_317:
// rs1_val==1 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x5, x7, 272, x8)

inst_318:
// rs1_val==1 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x1, 0xaaaaaaaaaaaaaaaa, x7, 280, x8)

inst_319:
// rs1_val==1 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x5555555555555555, x7, 288, x8)

inst_320:
// rs1_val==1 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x1, 0x3, x7, 296, x8)

inst_321:
// rs1_val==3037000500 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f334, 0x100000001, x7, 304, x8)

inst_322:
// rs1_val==3037000500 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f334, 0x1, x7, 312, x8)

inst_323:
// rs1_val==3037000500 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0xb504f334, 0xb504f334, 0xb504f334, x7, 320, x8)

inst_324:
// rs1_val==3037000500 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x24046224, 0xb504f334, 0x6666666666666667, x7, 328, x8)

inst_325:
// rs1_val==3037000500 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x31003334, 0xb504f334, 0x3333333333333334, x7, 336, x8)

inst_326:
// rs1_val==3037000500 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0xb504f334, 0x6, x7, 344, x8)

inst_327:
// rs1_val==3037000500 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xb504f334, 0xaaaaaaaaaaaaaaab, x7, 352, x8)

inst_328:
// rs1_val==3037000500 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x15045114, 0xb504f334, 0x5555555555555556, x7, 360, x8)

inst_329:
// rs1_val==3037000500 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0xb504f334, 0x4, x7, 368, x8)

inst_330:
// rs1_val==3037000500 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0xb504f334, 0xb504f334, 0xffffffff, x7, 376, x8)

inst_331:
// rs1_val==3037000500 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f334, 0x0, x7, 384, x8)

inst_332:
// rs1_val==3037000500 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0xb504f330, 0xb504f334, 0xb504f332, x7, 392, x8)

inst_333:
// rs1_val==3037000500 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x24046224, 0xb504f334, 0x6666666666666665, x7, 400, x8)

inst_334:
// rs1_val==3037000500 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0xb504f334, 0x3333333333333332, x7, 408, x8)

inst_335:
// rs1_val==3037000500 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xb504f334, 0xaaaaaaaaaaaaaaa9, x7, 416, x8)

inst_336:
// rs1_val==3037000500 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x15045114, 0xb504f334, 0x5555555555555554, x7, 424, x8)

inst_337:
// rs1_val==3037000500 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f334, 0x2, x7, 432, x8)

inst_338:
// rs1_val==3037000500 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f334, 0x100000000, x7, 440, x8)

inst_339:
// rs1_val==3037000500 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0xb504f330, 0xb504f334, 0xb504f333, x7, 448, x8)

inst_340:
// rs1_val==3037000500 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x24046224, 0xb504f334, 0x6666666666666666, x7, 456, x8)

inst_341:
// rs1_val==3037000500 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0xb504f334, 0x3333333333333333, x7, 464, x8)

inst_342:
// rs1_val==3037000500 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0xb504f334, 0x5, x7, 472, x8)

inst_343:
// rs1_val==3037000500 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xb504f334, 0xaaaaaaaaaaaaaaaa, x7, 480, x8)

inst_344:
// rs1_val==3037000500 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x15045114, 0xb504f334, 0x5555555555555555, x7, 488, x8)

inst_345:
// rs1_val==3037000500 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f334;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f334, 0x3, x7, 496, x8)

inst_346:
// rs1_val==7378697629483820647 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x6666666666666667, 0x100000001, x7, 504, x8)

inst_347:
// rs1_val==7378697629483820647 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x6666666666666667, 0x1, x7, 512, x8)

inst_348:
// rs1_val==7378697629483820647 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x24046224, 0x6666666666666667, 0xb504f334, x7, 520, x8)

inst_349:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666667, 0x6666666666666667, 0x6666666666666667, x7, 528, x8)

inst_350:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222224, 0x6666666666666667, 0x3333333333333334, x7, 536, x8)

inst_351:
// rs1_val==7378697629483820647 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x6666666666666667, 0x6, x7, 544, x8)

inst_352:
// rs1_val==7378697629483820647 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222223, 0x6666666666666667, 0xaaaaaaaaaaaaaaab, x7, 552, x8)

inst_353:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444446, 0x6666666666666667, 0x5555555555555556, x7, 560, x8)

inst_354:
// rs1_val==7378697629483820647 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6666666666666667, 0x4, x7, 568, x8)

inst_355:
// rs1_val==7378697629483820647 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x66666667, 0x6666666666666667, 0xffffffff, x7, 576, x8)

inst_356:
// rs1_val==7378697629483820647 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666667, 0x0, x7, 584, x8)

inst_357:
// rs1_val==7378697629483820647 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x24046222, 0x6666666666666667, 0xb504f332, x7, 592, x8)

inst_358:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666665, 0x6666666666666667, 0x6666666666666665, x7, 600, x8)

inst_359:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x6666666666666667, 0x3333333333333332, x7, 608, x8)

inst_360:
// rs1_val==7378697629483820647 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0x6666666666666667, 0xaaaaaaaaaaaaaaa9, x7, 616, x8)

inst_361:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x6666666666666667, 0x5555555555555554, x7, 624, x8)

inst_362:
// rs1_val==7378697629483820647 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6666666666666667, 0x2, x7, 632, x8)

inst_363:
// rs1_val==7378697629483820647 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666667, 0x100000000, x7, 640, x8)

inst_364:
// rs1_val==7378697629483820647 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x24046223, 0x6666666666666667, 0xb504f333, x7, 648, x8)

inst_365:
// rs1_val==7378697629483820647 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666666, 0x6666666666666667, 0x6666666666666666, x7, 656, x8)

inst_366:
// rs1_val==7378697629483820647 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222223, 0x6666666666666667, 0x3333333333333333, x7, 664, x8)

inst_367:
// rs1_val==7378697629483820647 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x6666666666666667, 0x5, x7, 672, x8)

inst_368:
// rs1_val==7378697629483820647 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x6666666666666667, 0xaaaaaaaaaaaaaaaa, x7, 680, x8)

inst_369:
// rs1_val==7378697629483820647 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444445, 0x6666666666666667, 0x5555555555555555, x7, 688, x8)

inst_370:
// rs1_val==7378697629483820647 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666667;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x6666666666666667, 0x3, x7, 696, x8)

inst_371:
// rs1_val==3689348814741910324 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x3333333333333334, 0x100000001, x7, 704, x8)

inst_372:
// rs1_val==3689348814741910324 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333334, 0x1, x7, 712, x8)

inst_373:
// rs1_val==3689348814741910324 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x31003334, 0x3333333333333334, 0xb504f334, x7, 720, x8)

inst_374:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222224, 0x3333333333333334, 0x6666666666666667, x7, 728, x8)

inst_375:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333334, 0x3333333333333334, 0x3333333333333334, x7, 736, x8)

inst_376:
// rs1_val==3689348814741910324 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x3333333333333334, 0x6, x7, 744, x8)

inst_377:
// rs1_val==3689348814741910324 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x3333333333333334, 0xaaaaaaaaaaaaaaab, x7, 752, x8)

inst_378:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111114, 0x3333333333333334, 0x5555555555555556, x7, 760, x8)

inst_379:
// rs1_val==3689348814741910324 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x3333333333333334, 0x4, x7, 768, x8)

inst_380:
// rs1_val==3689348814741910324 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x33333334, 0x3333333333333334, 0xffffffff, x7, 776, x8)

inst_381:
// rs1_val==3689348814741910324 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333334, 0x0, x7, 784, x8)

inst_382:
// rs1_val==3689348814741910324 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0x3333333333333334, 0xb504f332, x7, 792, x8)

inst_383:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222224, 0x3333333333333334, 0x6666666666666665, x7, 800, x8)

inst_384:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333330, 0x3333333333333334, 0x3333333333333332, x7, 808, x8)

inst_385:
// rs1_val==3689348814741910324 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x3333333333333334, 0xaaaaaaaaaaaaaaa9, x7, 816, x8)

inst_386:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111114, 0x3333333333333334, 0x5555555555555554, x7, 824, x8)

inst_387:
// rs1_val==3689348814741910324 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333334, 0x2, x7, 832, x8)

inst_388:
// rs1_val==3689348814741910324 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x3333333333333334, 0x100000000, x7, 840, x8)

inst_389:
// rs1_val==3689348814741910324 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0x3333333333333334, 0xb504f333, x7, 848, x8)

inst_390:
// rs1_val==3689348814741910324 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222224, 0x3333333333333334, 0x6666666666666666, x7, 856, x8)

inst_391:
// rs1_val==3689348814741910324 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333330, 0x3333333333333334, 0x3333333333333333, x7, 864, x8)

inst_392:
// rs1_val==3689348814741910324 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x3333333333333334, 0x5, x7, 872, x8)

inst_393:
// rs1_val==3689348814741910324 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x3333333333333334, 0xaaaaaaaaaaaaaaaa, x7, 880, x8)

inst_394:
// rs1_val==3689348814741910324 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111114, 0x3333333333333334, 0x5555555555555555, x7, 888, x8)

inst_395:
// rs1_val==3689348814741910324 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333334;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333334, 0x3, x7, 896, x8)

inst_396:
// rs1_val==6 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6, 0x100000001, x7, 904, x8)

inst_397:
// rs1_val==6 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6, 0x1, x7, 912, x8)

inst_398:
// rs1_val==6 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6, 0xb504f334, x7, 920, x8)

inst_399:
// rs1_val==6 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x6, 0x6666666666666667, x7, 928, x8)

inst_400:
// rs1_val==6 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6, 0x3333333333333334, x7, 936, x8)

inst_401:
// rs1_val==6 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x6, 0x6, x7, 944, x8)

inst_402:
// rs1_val==6 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0xaaaaaaaaaaaaaaab, x7, 952, x8)

inst_403:
// rs1_val==6 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x6, 0x5555555555555556, x7, 960, x8)

inst_404:
// rs1_val==6 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6, 0x4, x7, 968, x8)

inst_405:
// rs1_val==6 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x6, 0xffffffff, x7, 976, x8)

inst_406:
// rs1_val==6 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6, 0x0, x7, 984, x8)

inst_407:
// rs1_val==6 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0xb504f332, x7, 992, x8)

inst_408:
// rs1_val==6 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6, 0x6666666666666665, x7, 1000, x8)

inst_409:
// rs1_val==6 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0x3333333333333332, x7, 1008, x8)

inst_410:
// rs1_val==6 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6, 0xaaaaaaaaaaaaaaa9, x7, 1016, x8)

inst_411:
// rs1_val==6 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6, 0x5555555555555554, x7, 1024, x8)

inst_412:
// rs1_val==6 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0x2, x7, 1032, x8)

inst_413:
// rs1_val==6 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6, 0x100000000, x7, 1040, x8)

inst_414:
// rs1_val==6 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0xb504f333, x7, 1048, x8)

inst_415:
// rs1_val==6 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x6, 0x6666666666666666, x7, 1056, x8)

inst_416:
// rs1_val==6 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0x3333333333333333, x7, 1064, x8)

inst_417:
// rs1_val==6 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6, 0x5, x7, 1072, x8)

inst_418:
// rs1_val==6 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0xaaaaaaaaaaaaaaaa, x7, 1080, x8)

inst_419:
// rs1_val==6 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6, 0x5555555555555555, x7, 1088, x8)

inst_420:
// rs1_val==6 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6, 0x3, x7, 1096, x8)

inst_421:
// rs1_val==12297829382473034411 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaab, 0x100000001, x7, 1104, x8)

inst_422:
// rs1_val==12297829382473034411 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaab, 0x1, x7, 1112, x8)

inst_423:
// rs1_val==12297829382473034411 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xaaaaaaaaaaaaaaab, 0xb504f334, x7, 1120, x8)

inst_424:
// rs1_val==12297829382473034411 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222223, 0xaaaaaaaaaaaaaaab, 0x6666666666666667, x7, 1128, x8)

inst_425:
// rs1_val==12297829382473034411 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0xaaaaaaaaaaaaaaab, 0x3333333333333334, x7, 1136, x8)

inst_426:
// rs1_val==12297829382473034411 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xaaaaaaaaaaaaaaab, 0x6, x7, 1144, x8)

inst_427:
// rs1_val==12297829382473034411 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaab, 0xaaaaaaaaaaaaaaab, 0xaaaaaaaaaaaaaaab, x7, 1152, x8)

inst_428:
// rs1_val==12297829382473034411 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xaaaaaaaaaaaaaaab, 0x5555555555555556, x7, 1160, x8)

inst_429:
// rs1_val==12297829382473034411 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaab, 0x4, x7, 1168, x8)

inst_430:
// rs1_val==12297829382473034411 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaab, 0xaaaaaaaaaaaaaaab, 0xffffffff, x7, 1176, x8)

inst_431:
// rs1_val==12297829382473034411 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaab, 0x0, x7, 1184, x8)

inst_432:
// rs1_val==12297829382473034411 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0xa000a222, 0xaaaaaaaaaaaaaaab, 0xb504f332, x7, 1192, x8)

inst_433:
// rs1_val==12297829382473034411 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0xaaaaaaaaaaaaaaab, 0x6666666666666665, x7, 1200, x8)

inst_434:
// rs1_val==12297829382473034411 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0xaaaaaaaaaaaaaaab, 0x3333333333333332, x7, 1208, x8)

inst_435:
// rs1_val==12297829382473034411 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaab, 0xaaaaaaaaaaaaaaa9, x7, 1216, x8)

inst_436:
// rs1_val==12297829382473034411 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaab, 0x5555555555555554, x7, 1224, x8)

inst_437:
// rs1_val==12297829382473034411 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xaaaaaaaaaaaaaaab, 0x2, x7, 1232, x8)

inst_438:
// rs1_val==12297829382473034411 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaab, 0x100000000, x7, 1240, x8)

inst_439:
// rs1_val==12297829382473034411 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0xa000a223, 0xaaaaaaaaaaaaaaab, 0xb504f333, x7, 1248, x8)

inst_440:
// rs1_val==12297829382473034411 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0xaaaaaaaaaaaaaaab, 0x6666666666666666, x7, 1256, x8)

inst_441:
// rs1_val==12297829382473034411 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222223, 0xaaaaaaaaaaaaaaab, 0x3333333333333333, x7, 1264, x8)

inst_442:
// rs1_val==12297829382473034411 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaab, 0x5, x7, 1272, x8)

inst_443:
// rs1_val==12297829382473034411 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaab, 0xaaaaaaaaaaaaaaaa, x7, 1280, x8)

inst_444:
// rs1_val==12297829382473034411 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaab, 0x5555555555555555, x7, 1288, x8)

inst_445:
// rs1_val==12297829382473034411 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaab;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0xaaaaaaaaaaaaaaab, 0x3, x7, 1296, x8)

inst_446:
// rs1_val==6148914691236517206 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x5555555555555556, 0x100000001, x7, 1304, x8)

inst_447:
// rs1_val==6148914691236517206 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555556, 0x1, x7, 1312, x8)

inst_448:
// rs1_val==6148914691236517206 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x15045114, 0x5555555555555556, 0xb504f334, x7, 1320, x8)

inst_449:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444446, 0x5555555555555556, 0x6666666666666667, x7, 1328, x8)

inst_450:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111114, 0x5555555555555556, 0x3333333333333334, x7, 1336, x8)

inst_451:
// rs1_val==6148914691236517206 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x5555555555555556, 0x6, x7, 1344, x8)

inst_452:
// rs1_val==6148914691236517206 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x5555555555555556, 0xaaaaaaaaaaaaaaab, x7, 1352, x8)

inst_453:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555556, 0x5555555555555556, 0x5555555555555556, x7, 1360, x8)

inst_454:
// rs1_val==6148914691236517206 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5555555555555556, 0x4, x7, 1368, x8)

inst_455:
// rs1_val==6148914691236517206 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x55555556, 0x5555555555555556, 0xffffffff, x7, 1376, x8)

inst_456:
// rs1_val==6148914691236517206 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555556, 0x0, x7, 1384, x8)

inst_457:
// rs1_val==6148914691236517206 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x15045112, 0x5555555555555556, 0xb504f332, x7, 1392, x8)

inst_458:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x5555555555555556, 0x6666666666666665, x7, 1400, x8)

inst_459:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111112, 0x5555555555555556, 0x3333333333333332, x7, 1408, x8)

inst_460:
// rs1_val==6148914691236517206 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555556, 0xaaaaaaaaaaaaaaa9, x7, 1416, x8)

inst_461:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555554, 0x5555555555555556, 0x5555555555555554, x7, 1424, x8)

inst_462:
// rs1_val==6148914691236517206 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x5555555555555556, 0x2, x7, 1432, x8)

inst_463:
// rs1_val==6148914691236517206 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x5555555555555556, 0x100000000, x7, 1440, x8)

inst_464:
// rs1_val==6148914691236517206 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x15045112, 0x5555555555555556, 0xb504f333, x7, 1448, x8)

inst_465:
// rs1_val==6148914691236517206 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444446, 0x5555555555555556, 0x6666666666666666, x7, 1456, x8)

inst_466:
// rs1_val==6148914691236517206 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111112, 0x5555555555555556, 0x3333333333333333, x7, 1464, x8)

inst_467:
// rs1_val==6148914691236517206 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5555555555555556, 0x5, x7, 1472, x8)

inst_468:
// rs1_val==6148914691236517206 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x5555555555555556, 0xaaaaaaaaaaaaaaaa, x7, 1480, x8)

inst_469:
// rs1_val==6148914691236517206 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555554, 0x5555555555555556, 0x5555555555555555, x7, 1488, x8)

inst_470:
// rs1_val==6148914691236517206 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555556;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x5555555555555556, 0x3, x7, 1496, x8)

inst_471:
// rs1_val==4 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x1, x7, 1504, x8)

inst_472:
// rs1_val==4 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0xb504f334, x7, 1512, x8)

inst_473:
// rs1_val==4 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x6666666666666667, x7, 1520, x8)

inst_474:
// rs1_val==4 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x3333333333333334, x7, 1528, x8)

inst_475:
// rs1_val==4 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x6, x7, 1536, x8)

inst_476:
// rs1_val==4 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0xaaaaaaaaaaaaaaab, x7, 1544, x8)

inst_477:
// rs1_val==4 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x5555555555555556, x7, 1552, x8)

inst_478:
// rs1_val==4 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x4, x7, 1560, x8)

inst_479:
// rs1_val==4 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0xffffffff, x7, 1568, x8)

inst_480:
// rs1_val==4 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x0, x7, 1576, x8)

inst_481:
// rs1_val==4 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0xb504f332, x7, 1584, x8)

inst_482:
// rs1_val==4 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x6666666666666665, x7, 1592, x8)

inst_483:
// rs1_val==4 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x3333333333333332, x7, 1600, x8)

inst_484:
// rs1_val==4 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0xaaaaaaaaaaaaaaa9, x7, 1608, x8)

inst_485:
// rs1_val==4 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x5555555555555554, x7, 1616, x8)

inst_486:
// rs1_val==4 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x2, x7, 1624, x8)

inst_487:
// rs1_val==4 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x100000000, x7, 1632, x8)

inst_488:
// rs1_val==4 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0xb504f333, x7, 1640, x8)

inst_489:
// rs1_val==4 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x6666666666666666, x7, 1648, x8)

inst_490:
// rs1_val==4 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x3333333333333333, x7, 1656, x8)

inst_491:
// rs1_val==4 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x5, x7, 1664, x8)

inst_492:
// rs1_val==4 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0xaaaaaaaaaaaaaaaa, x7, 1672, x8)

inst_493:
// rs1_val==4 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x4, 0x5555555555555555, x7, 1680, x8)

inst_494:
// rs1_val==4 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x4, 0x3, x7, 1688, x8)

inst_495:
// rs1_val==4294967295 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xffffffff, 0x100000001, x7, 1696, x8)

inst_496:
// rs1_val==4294967295 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xffffffff, 0x1, x7, 1704, x8)

inst_497:
// rs1_val==4294967295 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0xb504f334, 0xffffffff, 0xb504f334, x7, 1712, x8)

inst_498:
// rs1_val==4294967295 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x66666667, 0xffffffff, 0x6666666666666667, x7, 1720, x8)

inst_499:
// rs1_val==4294967295 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x33333334, 0xffffffff, 0x3333333333333334, x7, 1728, x8)

inst_500:
// rs1_val==4294967295 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0xffffffff, 0x6, x7, 1736, x8)

inst_501:
// rs1_val==4294967295 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaab, 0xffffffff, 0xaaaaaaaaaaaaaaab, x7, 1744, x8)

inst_502:
// rs1_val==4294967295 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x55555556, 0xffffffff, 0x5555555555555556, x7, 1752, x8)

inst_503:
// rs1_val==4294967295 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0xffffffff, 0x4, x7, 1760, x8)

inst_504:
// rs1_val==4294967295 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0xffffffff, 0xffffffff, 0xffffffff, x7, 1768, x8)

inst_505:
// rs1_val==4294967295 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xffffffff, 0x0, x7, 1776, x8)

inst_506:
// rs1_val==4294967295 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0xb504f332, 0xffffffff, 0xb504f332, x7, 1784, x8)

inst_507:
// rs1_val==4294967295 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x66666665, 0xffffffff, 0x6666666666666665, x7, 1792, x8)

inst_508:
// rs1_val==4294967295 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x33333332, 0xffffffff, 0x3333333333333332, x7, 1800, x8)

inst_509:
// rs1_val==4294967295 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaa9, 0xffffffff, 0xaaaaaaaaaaaaaaa9, x7, 1808, x8)

inst_510:
// rs1_val==4294967295 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x55555554, 0xffffffff, 0x5555555555555554, x7, 1816, x8)

inst_511:
// rs1_val==4294967295 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xffffffff, 0x2, x7, 1824, x8)

inst_512:
// rs1_val==4294967295 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xffffffff, 0x100000000, x7, 1832, x8)

inst_513:
// rs1_val==4294967295 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0xb504f333, 0xffffffff, 0xb504f333, x7, 1840, x8)

inst_514:
// rs1_val==4294967295 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x66666666, 0xffffffff, 0x6666666666666666, x7, 1848, x8)

inst_515:
// rs1_val==4294967295 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x33333333, 0xffffffff, 0x3333333333333333, x7, 1856, x8)

inst_516:
// rs1_val==4294967295 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0xffffffff, 0x5, x7, 1864, x8)

inst_517:
// rs1_val==4294967295 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaa, 0xffffffff, 0xaaaaaaaaaaaaaaaa, x7, 1872, x8)

inst_518:
// rs1_val==4294967295 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x55555555, 0xffffffff, 0x5555555555555555, x7, 1880, x8)

inst_519:
// rs1_val==4294967295 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0xffffffff, 0x3, x7, 1888, x8)

inst_520:
// rs1_val==0 and rs2_val==4294967297, rs1_val == 0
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x100000001, x7, 1896, x8)

inst_521:
// rs1_val==0 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x1, x7, 1904, x8)

inst_522:
// rs1_val==0 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0xb504f334, x7, 1912, x8)

inst_523:
// rs1_val==0 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x6666666666666667, x7, 1920, x8)

inst_524:
// rs1_val==0 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x3333333333333334, x7, 1928, x8)

inst_525:
// rs1_val==0 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x6, x7, 1936, x8)

inst_526:
// rs1_val==0 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0xaaaaaaaaaaaaaaab, x7, 1944, x8)

inst_527:
// rs1_val==0 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x5555555555555556, x7, 1952, x8)

inst_528:
// rs1_val==0 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x4, x7, 1960, x8)

inst_529:
// rs1_val==0 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0xffffffff, x7, 1968, x8)

inst_530:
// rs1_val==0 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x0, x7, 1976, x8)

inst_531:
// rs1_val==0 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0xb504f332, x7, 1984, x8)

inst_532:
// rs1_val==0 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x6666666666666665, x7, 1992, x8)

inst_533:
// rs1_val==0 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x3333333333333332, x7, 2000, x8)

inst_534:
// rs1_val==0 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0xaaaaaaaaaaaaaaa9, x7, 2008, x8)

inst_535:
// rs1_val==0 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x5555555555555554, x7, 2016, x8)

inst_536:
// rs1_val==0 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x2, x7, 2024, x8)

inst_537:
// rs1_val==0 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x100000000, x7, 2032, x8)

inst_538:
// rs1_val==0 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0xb504f333, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_3)

inst_539:
// rs1_val==0 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x6666666666666666, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_4)

inst_540:
// rs1_val==0 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x3333333333333333, x7, 0, x8)

inst_541:
// rs1_val==0 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x5, x7, 8, x8)

inst_542:
// rs1_val==0 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0xaaaaaaaaaaaaaaaa, x7, 16, x8)

inst_543:
// rs1_val==0 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x5555555555555555, x7, 24, x8)

inst_544:
// rs1_val==0 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x0, 0x3, x7, 32, x8)

inst_545:
// rs1_val==3037000498 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f332, 0x100000001, x7, 40, x8)

inst_546:
// rs1_val==3037000498 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f332, 0x1, x7, 48, x8)

inst_547:
// rs1_val==3037000498 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0xb504f330, 0xb504f332, 0xb504f334, x7, 56, x8)

inst_548:
// rs1_val==3037000498 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x24046222, 0xb504f332, 0x6666666666666667, x7, 64, x8)

inst_549:
// rs1_val==3037000498 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0xb504f332, 0x3333333333333334, x7, 72, x8)

inst_550:
// rs1_val==3037000498 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xb504f332, 0x6, x7, 80, x8)

inst_551:
// rs1_val==3037000498 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0xa000a222, 0xb504f332, 0xaaaaaaaaaaaaaaab, x7, 88, x8)

inst_552:
// rs1_val==3037000498 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x15045112, 0xb504f332, 0x5555555555555556, x7, 96, x8)

inst_553:
// rs1_val==3037000498 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f332, 0x4, x7, 104, x8)

inst_554:
// rs1_val==3037000498 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0xb504f332, 0xb504f332, 0xffffffff, x7, 112, x8)

inst_555:
// rs1_val==3037000498 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f332, 0x0, x7, 120, x8)

inst_556:
// rs1_val==3037000498 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0xb504f332, 0xb504f332, 0xb504f332, x7, 128, x8)

inst_557:
// rs1_val==3037000498 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x24046220, 0xb504f332, 0x6666666666666665, x7, 136, x8)

inst_558:
// rs1_val==3037000498 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x31003332, 0xb504f332, 0x3333333333333332, x7, 144, x8)

inst_559:
// rs1_val==3037000498 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xb504f332, 0xaaaaaaaaaaaaaaa9, x7, 152, x8)

inst_560:
// rs1_val==3037000498 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x15045110, 0xb504f332, 0x5555555555555554, x7, 160, x8)

inst_561:
// rs1_val==3037000498 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xb504f332, 0x2, x7, 168, x8)

inst_562:
// rs1_val==3037000498 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f332, 0x100000000, x7, 176, x8)

inst_563:
// rs1_val==3037000498 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0xb504f332, 0xb504f332, 0xb504f333, x7, 184, x8)

inst_564:
// rs1_val==3037000498 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x24046222, 0xb504f332, 0x6666666666666666, x7, 192, x8)

inst_565:
// rs1_val==3037000498 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x31003332, 0xb504f332, 0x3333333333333333, x7, 200, x8)

inst_566:
// rs1_val==3037000498 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f332, 0x5, x7, 208, x8)

inst_567:
// rs1_val==3037000498 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0xa000a222, 0xb504f332, 0xaaaaaaaaaaaaaaaa, x7, 216, x8)

inst_568:
// rs1_val==3037000498 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x15045110, 0xb504f332, 0x5555555555555555, x7, 224, x8)

inst_569:
// rs1_val==3037000498 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f332;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xb504f332, 0x3, x7, 232, x8)

inst_570:
// rs1_val==7378697629483820645 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x6666666666666665, 0x100000001, x7, 240, x8)

inst_571:
// rs1_val==7378697629483820645 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x6666666666666665, 0x1, x7, 248, x8)

inst_572:
// rs1_val==7378697629483820645 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x24046224, 0x6666666666666665, 0xb504f334, x7, 256, x8)

inst_573:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666665, 0x6666666666666665, 0x6666666666666667, x7, 264, x8)

inst_574:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222224, 0x6666666666666665, 0x3333333333333334, x7, 272, x8)

inst_575:
// rs1_val==7378697629483820645 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6666666666666665, 0x6, x7, 280, x8)

inst_576:
// rs1_val==7378697629483820645 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0x6666666666666665, 0xaaaaaaaaaaaaaaab, x7, 288, x8)

inst_577:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x6666666666666665, 0x5555555555555556, x7, 296, x8)

inst_578:
// rs1_val==7378697629483820645 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6666666666666665, 0x4, x7, 304, x8)

inst_579:
// rs1_val==7378697629483820645 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x66666665, 0x6666666666666665, 0xffffffff, x7, 312, x8)

inst_580:
// rs1_val==7378697629483820645 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666665, 0x0, x7, 320, x8)

inst_581:
// rs1_val==7378697629483820645 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x24046220, 0x6666666666666665, 0xb504f332, x7, 328, x8)

inst_582:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666665, 0x6666666666666665, 0x6666666666666665, x7, 336, x8)

inst_583:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x6666666666666665, 0x3333333333333332, x7, 344, x8)

inst_584:
// rs1_val==7378697629483820645 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0x6666666666666665, 0xaaaaaaaaaaaaaaa9, x7, 352, x8)

inst_585:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x6666666666666665, 0x5555555555555554, x7, 360, x8)

inst_586:
// rs1_val==7378697629483820645 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666665, 0x2, x7, 368, x8)

inst_587:
// rs1_val==7378697629483820645 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666665, 0x100000000, x7, 376, x8)

inst_588:
// rs1_val==7378697629483820645 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x24046221, 0x6666666666666665, 0xb504f333, x7, 384, x8)

inst_589:
// rs1_val==7378697629483820645 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666664, 0x6666666666666665, 0x6666666666666666, x7, 392, x8)

inst_590:
// rs1_val==7378697629483820645 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0x6666666666666665, 0x3333333333333333, x7, 400, x8)

inst_591:
// rs1_val==7378697629483820645 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x6666666666666665, 0x5, x7, 408, x8)

inst_592:
// rs1_val==7378697629483820645 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x6666666666666665, 0xaaaaaaaaaaaaaaaa, x7, 416, x8)

inst_593:
// rs1_val==7378697629483820645 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444445, 0x6666666666666665, 0x5555555555555555, x7, 424, x8)

inst_594:
// rs1_val==7378697629483820645 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666665;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x6666666666666665, 0x3, x7, 432, x8)

inst_595:
// rs1_val==3689348814741910322 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x3333333333333332, 0x100000001, x7, 440, x8)

inst_596:
// rs1_val==3689348814741910322 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333332, 0x1, x7, 448, x8)

inst_597:
// rs1_val==3689348814741910322 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0x3333333333333332, 0xb504f334, x7, 456, x8)

inst_598:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x3333333333333332, 0x6666666666666667, x7, 464, x8)

inst_599:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333330, 0x3333333333333332, 0x3333333333333334, x7, 472, x8)

inst_600:
// rs1_val==3689348814741910322 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3333333333333332, 0x6, x7, 480, x8)

inst_601:
// rs1_val==3689348814741910322 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x3333333333333332, 0xaaaaaaaaaaaaaaab, x7, 488, x8)

inst_602:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111112, 0x3333333333333332, 0x5555555555555556, x7, 496, x8)

inst_603:
// rs1_val==3689348814741910322 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333332, 0x4, x7, 504, x8)

inst_604:
// rs1_val==3689348814741910322 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x33333332, 0x3333333333333332, 0xffffffff, x7, 512, x8)

inst_605:
// rs1_val==3689348814741910322 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333332, 0x0, x7, 520, x8)

inst_606:
// rs1_val==3689348814741910322 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x31003332, 0x3333333333333332, 0xb504f332, x7, 528, x8)

inst_607:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x3333333333333332, 0x6666666666666665, x7, 536, x8)

inst_608:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333332, 0x3333333333333332, 0x3333333333333332, x7, 544, x8)

inst_609:
// rs1_val==3689348814741910322 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x3333333333333332, 0xaaaaaaaaaaaaaaa9, x7, 552, x8)

inst_610:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111110, 0x3333333333333332, 0x5555555555555554, x7, 560, x8)

inst_611:
// rs1_val==3689348814741910322 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3333333333333332, 0x2, x7, 568, x8)

inst_612:
// rs1_val==3689348814741910322 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x3333333333333332, 0x100000000, x7, 576, x8)

inst_613:
// rs1_val==3689348814741910322 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x31003332, 0x3333333333333332, 0xb504f333, x7, 584, x8)

inst_614:
// rs1_val==3689348814741910322 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x3333333333333332, 0x6666666666666666, x7, 592, x8)

inst_615:
// rs1_val==3689348814741910322 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333332, 0x3333333333333332, 0x3333333333333333, x7, 600, x8)

inst_616:
// rs1_val==3689348814741910322 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333332, 0x5, x7, 608, x8)

inst_617:
// rs1_val==3689348814741910322 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x3333333333333332, 0xaaaaaaaaaaaaaaaa, x7, 616, x8)

inst_618:
// rs1_val==3689348814741910322 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111110, 0x3333333333333332, 0x5555555555555555, x7, 624, x8)

inst_619:
// rs1_val==3689348814741910322 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333332;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3333333333333332, 0x3, x7, 632, x8)

inst_620:
// rs1_val==12297829382473034409 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaa9, 0x100000001, x7, 640, x8)

inst_621:
// rs1_val==12297829382473034409 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaa9, 0x1, x7, 648, x8)

inst_622:
// rs1_val==12297829382473034409 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xaaaaaaaaaaaaaaa9, 0xb504f334, x7, 656, x8)

inst_623:
// rs1_val==12297829382473034409 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0xaaaaaaaaaaaaaaa9, 0x6666666666666667, x7, 664, x8)

inst_624:
// rs1_val==12297829382473034409 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0xaaaaaaaaaaaaaaa9, 0x3333333333333334, x7, 672, x8)

inst_625:
// rs1_val==12297829382473034409 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaa9, 0x6, x7, 680, x8)

inst_626:
// rs1_val==12297829382473034409 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaab, x7, 688, x8)

inst_627:
// rs1_val==12297829382473034409 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaa9, 0x5555555555555556, x7, 696, x8)

inst_628:
// rs1_val==12297829382473034409 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaa9, 0x4, x7, 704, x8)

inst_629:
// rs1_val==12297829382473034409 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaa9, 0xaaaaaaaaaaaaaaa9, 0xffffffff, x7, 712, x8)

inst_630:
// rs1_val==12297829382473034409 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaa9, 0x0, x7, 720, x8)

inst_631:
// rs1_val==12297829382473034409 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xaaaaaaaaaaaaaaa9, 0xb504f332, x7, 728, x8)

inst_632:
// rs1_val==12297829382473034409 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0xaaaaaaaaaaaaaaa9, 0x6666666666666665, x7, 736, x8)

inst_633:
// rs1_val==12297829382473034409 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0xaaaaaaaaaaaaaaa9, 0x3333333333333332, x7, 744, x8)

inst_634:
// rs1_val==12297829382473034409 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaa9, x7, 752, x8)

inst_635:
// rs1_val==12297829382473034409 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaa9, 0x5555555555555554, x7, 760, x8)

inst_636:
// rs1_val==12297829382473034409 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaa9, 0x2, x7, 768, x8)

inst_637:
// rs1_val==12297829382473034409 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaa9, 0x100000000, x7, 776, x8)

inst_638:
// rs1_val==12297829382473034409 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0xa000a221, 0xaaaaaaaaaaaaaaa9, 0xb504f333, x7, 784, x8)

inst_639:
// rs1_val==12297829382473034409 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0xaaaaaaaaaaaaaaa9, 0x6666666666666666, x7, 792, x8)

inst_640:
// rs1_val==12297829382473034409 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0xaaaaaaaaaaaaaaa9, 0x3333333333333333, x7, 800, x8)

inst_641:
// rs1_val==12297829382473034409 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaa9, 0x5, x7, 808, x8)

inst_642:
// rs1_val==12297829382473034409 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaa8, 0xaaaaaaaaaaaaaaa9, 0xaaaaaaaaaaaaaaaa, x7, 816, x8)

inst_643:
// rs1_val==12297829382473034409 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaa9, 0x5555555555555555, x7, 824, x8)

inst_644:
// rs1_val==12297829382473034409 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaa9;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xaaaaaaaaaaaaaaa9, 0x3, x7, 832, x8)

inst_645:
// rs1_val==6148914691236517204 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x5555555555555554, 0x100000001, x7, 840, x8)

inst_646:
// rs1_val==6148914691236517204 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555554, 0x1, x7, 848, x8)

inst_647:
// rs1_val==6148914691236517204 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x15045114, 0x5555555555555554, 0xb504f334, x7, 856, x8)

inst_648:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x5555555555555554, 0x6666666666666667, x7, 864, x8)

inst_649:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111114, 0x5555555555555554, 0x3333333333333334, x7, 872, x8)

inst_650:
// rs1_val==6148914691236517204 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5555555555555554, 0x6, x7, 880, x8)

inst_651:
// rs1_val==6148914691236517204 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555554, 0xaaaaaaaaaaaaaaab, x7, 888, x8)

inst_652:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555554, 0x5555555555555554, 0x5555555555555556, x7, 896, x8)

inst_653:
// rs1_val==6148914691236517204 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5555555555555554, 0x4, x7, 904, x8)

inst_654:
// rs1_val==6148914691236517204 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x55555554, 0x5555555555555554, 0xffffffff, x7, 912, x8)

inst_655:
// rs1_val==6148914691236517204 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555554, 0x0, x7, 920, x8)

inst_656:
// rs1_val==6148914691236517204 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x15045110, 0x5555555555555554, 0xb504f332, x7, 928, x8)

inst_657:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x5555555555555554, 0x6666666666666665, x7, 936, x8)

inst_658:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111110, 0x5555555555555554, 0x3333333333333332, x7, 944, x8)

inst_659:
// rs1_val==6148914691236517204 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555554, 0xaaaaaaaaaaaaaaa9, x7, 952, x8)

inst_660:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555554, 0x5555555555555554, 0x5555555555555554, x7, 960, x8)

inst_661:
// rs1_val==6148914691236517204 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555554, 0x2, x7, 968, x8)

inst_662:
// rs1_val==6148914691236517204 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x5555555555555554, 0x100000000, x7, 976, x8)

inst_663:
// rs1_val==6148914691236517204 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x15045110, 0x5555555555555554, 0xb504f333, x7, 984, x8)

inst_664:
// rs1_val==6148914691236517204 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x5555555555555554, 0x6666666666666666, x7, 992, x8)

inst_665:
// rs1_val==6148914691236517204 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111110, 0x5555555555555554, 0x3333333333333333, x7, 1000, x8)

inst_666:
// rs1_val==6148914691236517204 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5555555555555554, 0x5, x7, 1008, x8)

inst_667:
// rs1_val==6148914691236517204 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555554, 0xaaaaaaaaaaaaaaaa, x7, 1016, x8)

inst_668:
// rs1_val==6148914691236517204 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555554, 0x5555555555555554, 0x5555555555555555, x7, 1024, x8)

inst_669:
// rs1_val==6148914691236517204 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555554;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555554, 0x3, x7, 1032, x8)

inst_670:
// rs1_val==2 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x1, x7, 1040, x8)

inst_671:
// rs1_val==2 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0xb504f334, x7, 1048, x8)

inst_672:
// rs1_val==2 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x6666666666666667, x7, 1056, x8)

inst_673:
// rs1_val==2 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x3333333333333334, x7, 1064, x8)

inst_674:
// rs1_val==2 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x6, x7, 1072, x8)

inst_675:
// rs1_val==2 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0xaaaaaaaaaaaaaaab, x7, 1080, x8)

inst_676:
// rs1_val==2 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x5555555555555556, x7, 1088, x8)

inst_677:
// rs1_val==2 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x4, x7, 1096, x8)

inst_678:
// rs1_val==2 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0xffffffff, x7, 1104, x8)

inst_679:
// rs1_val==2 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x0, x7, 1112, x8)

inst_680:
// rs1_val==2 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0xb504f332, x7, 1120, x8)

inst_681:
// rs1_val==2 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x6666666666666665, x7, 1128, x8)

inst_682:
// rs1_val==2 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x3333333333333332, x7, 1136, x8)

inst_683:
// rs1_val==2 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0xaaaaaaaaaaaaaaa9, x7, 1144, x8)

inst_684:
// rs1_val==2 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x5555555555555554, x7, 1152, x8)

inst_685:
// rs1_val==2 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x2, x7, 1160, x8)

inst_686:
// rs1_val==2 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x100000000, x7, 1168, x8)

inst_687:
// rs1_val==2 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0xb504f333, x7, 1176, x8)

inst_688:
// rs1_val==2 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x6666666666666666, x7, 1184, x8)

inst_689:
// rs1_val==2 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x3333333333333333, x7, 1192, x8)

inst_690:
// rs1_val==2 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x5, x7, 1200, x8)

inst_691:
// rs1_val==2 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0xaaaaaaaaaaaaaaaa, x7, 1208, x8)

inst_692:
// rs1_val==2 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x2, 0x5555555555555555, x7, 1216, x8)

inst_693:
// rs1_val==2 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x2, 0x3, x7, 1224, x8)

inst_694:
// rs1_val==4294967296 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x1, x7, 1232, x8)

inst_695:
// rs1_val==4294967296 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0xb504f334, x7, 1240, x8)

inst_696:
// rs1_val==4294967296 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x6666666666666667, x7, 1248, x8)

inst_697:
// rs1_val==4294967296 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x3333333333333334, x7, 1256, x8)

inst_698:
// rs1_val==4294967296 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x6, x7, 1264, x8)

inst_699:
// rs1_val==4294967296 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0xaaaaaaaaaaaaaaab, x7, 1272, x8)

inst_700:
// rs1_val==4294967296 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x5555555555555556, x7, 1280, x8)

inst_701:
// rs1_val==4294967296 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x4, x7, 1288, x8)

inst_702:
// rs1_val==4294967296 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0xffffffff, x7, 1296, x8)

inst_703:
// rs1_val==4294967296 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x0, x7, 1304, x8)

inst_704:
// rs1_val==4294967296 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0xb504f332, x7, 1312, x8)

inst_705:
// rs1_val==4294967296 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x6666666666666665, x7, 1320, x8)

inst_706:
// rs1_val==4294967296 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x3333333333333332, x7, 1328, x8)

inst_707:
// rs1_val==4294967296 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0xaaaaaaaaaaaaaaa9, x7, 1336, x8)

inst_708:
// rs1_val==4294967296 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x5555555555555554, x7, 1344, x8)

inst_709:
// rs1_val==4294967296 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x2, x7, 1352, x8)

inst_710:
// rs1_val==4294967296 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x100000000, x7, 1360, x8)

inst_711:
// rs1_val==4294967296 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0xb504f333, x7, 1368, x8)

inst_712:
// rs1_val==4294967296 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x6666666666666666, x7, 1376, x8)

inst_713:
// rs1_val==4294967296 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x3333333333333333, x7, 1384, x8)

inst_714:
// rs1_val==4294967296 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x5, x7, 1392, x8)

inst_715:
// rs1_val==4294967296 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0xaaaaaaaaaaaaaaaa, x7, 1400, x8)

inst_716:
// rs1_val==4294967296 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x100000000, 0x5555555555555555, x7, 1408, x8)

inst_717:
// rs1_val==4294967296 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000000;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x100000000, 0x3, x7, 1416, x8)

inst_718:
// rs1_val==3037000499 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xb504f333, 0x100000001, x7, 1424, x8)

inst_719:
// rs1_val==3037000499 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xb504f333, 0x1, x7, 1432, x8)

inst_720:
// rs1_val==3037000499 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0xb504f330, 0xb504f333, 0xb504f334, x7, 1440, x8)

inst_721:
// rs1_val==3037000499 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x24046223, 0xb504f333, 0x6666666666666667, x7, 1448, x8)

inst_722:
// rs1_val==3037000499 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0xb504f333, 0x3333333333333334, x7, 1456, x8)

inst_723:
// rs1_val==3037000499 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xb504f333, 0x6, x7, 1464, x8)

inst_724:
// rs1_val==3037000499 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0xa000a223, 0xb504f333, 0xaaaaaaaaaaaaaaab, x7, 1472, x8)

inst_725:
// rs1_val==3037000499 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x15045112, 0xb504f333, 0x5555555555555556, x7, 1480, x8)

inst_726:
// rs1_val==3037000499 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f333, 0x4, x7, 1488, x8)

inst_727:
// rs1_val==3037000499 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0xb504f333, 0xb504f333, 0xffffffff, x7, 1496, x8)

inst_728:
// rs1_val==3037000499 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f333, 0x0, x7, 1504, x8)

inst_729:
// rs1_val==3037000499 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0xb504f332, 0xb504f333, 0xb504f332, x7, 1512, x8)

inst_730:
// rs1_val==3037000499 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x24046221, 0xb504f333, 0x6666666666666665, x7, 1520, x8)

inst_731:
// rs1_val==3037000499 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x31003332, 0xb504f333, 0x3333333333333332, x7, 1528, x8)

inst_732:
// rs1_val==3037000499 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0xa000a221, 0xb504f333, 0xaaaaaaaaaaaaaaa9, x7, 1536, x8)

inst_733:
// rs1_val==3037000499 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x15045110, 0xb504f333, 0x5555555555555554, x7, 1544, x8)

inst_734:
// rs1_val==3037000499 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xb504f333, 0x2, x7, 1552, x8)

inst_735:
// rs1_val==3037000499 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xb504f333, 0x100000000, x7, 1560, x8)

inst_736:
// rs1_val==3037000499 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0xb504f333, 0xb504f333, 0xb504f333, x7, 1568, x8)

inst_737:
// rs1_val==3037000499 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x24046222, 0xb504f333, 0x6666666666666666, x7, 1576, x8)

inst_738:
// rs1_val==3037000499 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x31003333, 0xb504f333, 0x3333333333333333, x7, 1584, x8)

inst_739:
// rs1_val==3037000499 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0xb504f333, 0x5, x7, 1592, x8)

inst_740:
// rs1_val==3037000499 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0xa000a222, 0xb504f333, 0xaaaaaaaaaaaaaaaa, x7, 1600, x8)

inst_741:
// rs1_val==3037000499 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x15045111, 0xb504f333, 0x5555555555555555, x7, 1608, x8)

inst_742:
// rs1_val==3037000499 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xb504f333;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0xb504f333, 0x3, x7, 1616, x8)

inst_743:
// rs1_val==7378697629483820646 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666666, 0x100000001, x7, 1624, x8)

inst_744:
// rs1_val==7378697629483820646 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666666, 0x1, x7, 1632, x8)

inst_745:
// rs1_val==7378697629483820646 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x24046224, 0x6666666666666666, 0xb504f334, x7, 1640, x8)

inst_746:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666666, 0x6666666666666666, 0x6666666666666667, x7, 1648, x8)

inst_747:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222224, 0x6666666666666666, 0x3333333333333334, x7, 1656, x8)

inst_748:
// rs1_val==7378697629483820646 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x6, 0x6666666666666666, 0x6, x7, 1664, x8)

inst_749:
// rs1_val==7378697629483820646 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x6666666666666666, 0xaaaaaaaaaaaaaaab, x7, 1672, x8)

inst_750:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444446, 0x6666666666666666, 0x5555555555555556, x7, 1680, x8)

inst_751:
// rs1_val==7378697629483820646 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6666666666666666, 0x4, x7, 1688, x8)

inst_752:
// rs1_val==7378697629483820646 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x66666666, 0x6666666666666666, 0xffffffff, x7, 1696, x8)

inst_753:
// rs1_val==7378697629483820646 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666666, 0x0, x7, 1704, x8)

inst_754:
// rs1_val==7378697629483820646 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x24046222, 0x6666666666666666, 0xb504f332, x7, 1712, x8)

inst_755:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666664, 0x6666666666666666, 0x6666666666666665, x7, 1720, x8)

inst_756:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x6666666666666666, 0x3333333333333332, x7, 1728, x8)

inst_757:
// rs1_val==7378697629483820646 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0x6666666666666666, 0xaaaaaaaaaaaaaaa9, x7, 1736, x8)

inst_758:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x6666666666666666, 0x5555555555555554, x7, 1744, x8)

inst_759:
// rs1_val==7378697629483820646 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6666666666666666, 0x2, x7, 1752, x8)

inst_760:
// rs1_val==7378697629483820646 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x6666666666666666, 0x100000000, x7, 1760, x8)

inst_761:
// rs1_val==7378697629483820646 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x24046222, 0x6666666666666666, 0xb504f333, x7, 1768, x8)

inst_762:
// rs1_val==7378697629483820646 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x6666666666666666, 0x6666666666666666, 0x6666666666666666, x7, 1776, x8)

inst_763:
// rs1_val==7378697629483820646 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x6666666666666666, 0x3333333333333333, x7, 1784, x8)

inst_764:
// rs1_val==7378697629483820646 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x6666666666666666, 0x5, x7, 1792, x8)

inst_765:
// rs1_val==7378697629483820646 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x6666666666666666, 0xaaaaaaaaaaaaaaaa, x7, 1800, x8)

inst_766:
// rs1_val==7378697629483820646 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x6666666666666666, 0x5555555555555555, x7, 1808, x8)

inst_767:
// rs1_val==7378697629483820646 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x6666666666666666;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x6666666666666666, 0x3, x7, 1816, x8)

inst_768:
// rs1_val==3689348814741910323 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x3333333333333333, 0x100000001, x7, 1824, x8)

inst_769:
// rs1_val==3689348814741910323 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3333333333333333, 0x1, x7, 1832, x8)

inst_770:
// rs1_val==3689348814741910323 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x31003330, 0x3333333333333333, 0xb504f334, x7, 1840, x8)

inst_771:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222223, 0x3333333333333333, 0x6666666666666667, x7, 1848, x8)

inst_772:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333330, 0x3333333333333333, 0x3333333333333334, x7, 1856, x8)

inst_773:
// rs1_val==3689348814741910323 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3333333333333333, 0x6, x7, 1864, x8)

inst_774:
// rs1_val==3689348814741910323 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222223, 0x3333333333333333, 0xaaaaaaaaaaaaaaab, x7, 1872, x8)

inst_775:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111112, 0x3333333333333333, 0x5555555555555556, x7, 1880, x8)

inst_776:
// rs1_val==3689348814741910323 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333333, 0x4, x7, 1888, x8)

inst_777:
// rs1_val==3689348814741910323 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x33333333, 0x3333333333333333, 0xffffffff, x7, 1896, x8)

inst_778:
// rs1_val==3689348814741910323 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3333333333333333, 0x0, x7, 1904, x8)

inst_779:
// rs1_val==3689348814741910323 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x31003332, 0x3333333333333333, 0xb504f332, x7, 1912, x8)

inst_780:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0x3333333333333333, 0x6666666666666665, x7, 1920, x8)

inst_781:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333332, 0x3333333333333333, 0x3333333333333332, x7, 1928, x8)

inst_782:
// rs1_val==3689348814741910323 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222221, 0x3333333333333333, 0xaaaaaaaaaaaaaaa9, x7, 1936, x8)

inst_783:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111110, 0x3333333333333333, 0x5555555555555554, x7, 1944, x8)

inst_784:
// rs1_val==3689348814741910323 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3333333333333333, 0x2, x7, 1952, x8)

inst_785:
// rs1_val==3689348814741910323 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x3333333333333333, 0x100000000, x7, 1960, x8)

inst_786:
// rs1_val==3689348814741910323 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x31003333, 0x3333333333333333, 0xb504f333, x7, 1968, x8)

inst_787:
// rs1_val==3689348814741910323 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x3333333333333333, 0x6666666666666666, x7, 1976, x8)

inst_788:
// rs1_val==3689348814741910323 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333, x7, 1984, x8)

inst_789:
// rs1_val==3689348814741910323 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3333333333333333, 0x5, x7, 1992, x8)

inst_790:
// rs1_val==3689348814741910323 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0x3333333333333333, 0xaaaaaaaaaaaaaaaa, x7, 2000, x8)

inst_791:
// rs1_val==3689348814741910323 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111111, 0x3333333333333333, 0x5555555555555555, x7, 2008, x8)

inst_792:
// rs1_val==3689348814741910323 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3333333333333333;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x3333333333333333, 0x3, x7, 2016, x8)

inst_793:
// rs1_val==5 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5, 0x100000001, x7, 2024, x8)

inst_794:
// rs1_val==5 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5, 0x1, x7, 2032, x8)

inst_795:
// rs1_val==5 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5, 0xb504f334, x7, 2040, x8)
RVTEST_SIGBASE(x7,signature_x7_5)

inst_796:
// rs1_val==5 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x5, 0x6666666666666667, x7, 0, x8)
RVTEST_SIGBASE(x7,signature_x7_6)

inst_797:
// rs1_val==5 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5, 0x3333333333333334, x7, 0, x8)

inst_798:
// rs1_val==5 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5, 0x6, x7, 8, x8)

inst_799:
// rs1_val==5 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5, 0xaaaaaaaaaaaaaaab, x7, 16, x8)

inst_800:
// rs1_val==5 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5, 0x5555555555555556, x7, 24, x8)

inst_801:
// rs1_val==5 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5, 0x4, x7, 32, x8)

inst_802:
// rs1_val==5 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x5, 0xffffffff, x7, 40, x8)

inst_803:
// rs1_val==5 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5, 0x0, x7, 48, x8)

inst_804:
// rs1_val==5 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5, 0xb504f332, x7, 56, x8)

inst_805:
// rs1_val==5 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x5, 0x6666666666666665, x7, 64, x8)

inst_806:
// rs1_val==5 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5, 0x3333333333333332, x7, 72, x8)

inst_807:
// rs1_val==5 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5, 0xaaaaaaaaaaaaaaa9, x7, 80, x8)

inst_808:
// rs1_val==5 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5, 0x5555555555555554, x7, 88, x8)

inst_809:
// rs1_val==5 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5, 0x2, x7, 96, x8)

inst_810:
// rs1_val==5 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5, 0x100000000, x7, 104, x8)

inst_811:
// rs1_val==5 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5, 0xb504f333, x7, 112, x8)

inst_812:
// rs1_val==5 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5, 0x6666666666666666, x7, 120, x8)

inst_813:
// rs1_val==5 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5, 0x3333333333333333, x7, 128, x8)

inst_814:
// rs1_val==5 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x5, 0x5, x7, 136, x8)

inst_815:
// rs1_val==5 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5, 0xaaaaaaaaaaaaaaaa, x7, 144, x8)

inst_816:
// rs1_val==5 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x5, 0x5555555555555555, x7, 152, x8)

inst_817:
// rs1_val==5 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5, 0x3, x7, 160, x8)

inst_818:
// rs1_val==12297829382473034410 and rs2_val==4294967297, rs1_val == 12297829382473034410
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x100000001, x7, 168, x8)

inst_819:
// rs1_val==12297829382473034410 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x1, x7, 176, x8)

inst_820:
// rs1_val==12297829382473034410 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0xa000a220, 0xaaaaaaaaaaaaaaaa, 0xb504f334, x7, 184, x8)

inst_821:
// rs1_val==12297829382473034410 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0xaaaaaaaaaaaaaaaa, 0x6666666666666667, x7, 192, x8)

inst_822:
// rs1_val==12297829382473034410 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0xaaaaaaaaaaaaaaaa, 0x3333333333333334, x7, 200, x8)

inst_823:
// rs1_val==12297829382473034410 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xaaaaaaaaaaaaaaaa, 0x6, x7, 208, x8)

inst_824:
// rs1_val==12297829382473034410 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaab, x7, 216, x8)

inst_825:
// rs1_val==12297829382473034410 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xaaaaaaaaaaaaaaaa, 0x5555555555555556, x7, 224, x8)

inst_826:
// rs1_val==12297829382473034410 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x4, x7, 232, x8)

inst_827:
// rs1_val==12297829382473034410 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaa, 0xaaaaaaaaaaaaaaaa, 0xffffffff, x7, 240, x8)

inst_828:
// rs1_val==12297829382473034410 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x0, x7, 248, x8)

inst_829:
// rs1_val==12297829382473034410 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0xa000a222, 0xaaaaaaaaaaaaaaaa, 0xb504f332, x7, 256, x8)

inst_830:
// rs1_val==12297829382473034410 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222220, 0xaaaaaaaaaaaaaaaa, 0x6666666666666665, x7, 264, x8)

inst_831:
// rs1_val==12297829382473034410 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0xaaaaaaaaaaaaaaaa, 0x3333333333333332, x7, 272, x8)

inst_832:
// rs1_val==12297829382473034410 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaa8, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaa9, x7, 280, x8)

inst_833:
// rs1_val==3 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3, 0x6666666666666666, x7, 288, x8)

inst_834:
// rs1_val==3 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x3, 0x3333333333333333, x7, 296, x8)

inst_835:
// rs1_val==3 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3, 0x5, x7, 304, x8)

inst_836:
// rs1_val==3 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3, 0xaaaaaaaaaaaaaaaa, x7, 312, x8)

inst_837:
// rs1_val==3 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3, 0x5555555555555555, x7, 320, x8)

inst_838:
// rs1_val==3 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x3, 0x3, x7, 328, x8)

inst_839:
// rs1_val == 6148914691236517205, rs1_val==6148914691236517205 and rs2_val==4294967297
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x5555555555555555, 0x100000001, x7, 336, x8)

inst_840:
// rs1_val == (2**(xlen)-1), 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xffffffffffffffff;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0xffffffffffffffff, 0x100000001, x7, 344, x8)

inst_841:
// rs2_val == (2**(xlen)-1), 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffffffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffffffffffff, x7, 352, x8)

inst_842:
// rs1_val==12297829382473034410 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x5555555555555554, x7, 360, x8)

inst_843:
// rs1_val==12297829382473034410 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xaaaaaaaaaaaaaaaa, 0x2, x7, 368, x8)

inst_844:
// rs1_val==12297829382473034410 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x100000000, x7, 376, x8)

inst_845:
// rs1_val==12297829382473034410 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0xa000a222, 0xaaaaaaaaaaaaaaaa, 0xb504f333, x7, 384, x8)

inst_846:
// rs1_val==12297829382473034410 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0xaaaaaaaaaaaaaaaa, 0x6666666666666666, x7, 392, x8)

inst_847:
// rs1_val==12297829382473034410 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x2222222222222222, 0xaaaaaaaaaaaaaaaa, 0x3333333333333333, x7, 400, x8)

inst_848:
// rs1_val==12297829382473034410 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x5, x7, 408, x8)

inst_849:
// rs1_val==12297829382473034410 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaaa, 0xaaaaaaaaaaaaaaaa, x7, 416, x8)

inst_850:
// rs1_val==12297829382473034410 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0xaaaaaaaaaaaaaaaa, 0x5555555555555555, x7, 424, x8)

inst_851:
// rs1_val==12297829382473034410 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaaaaaaaaaa;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0xaaaaaaaaaaaaaaaa, 0x3, x7, 432, x8)

inst_852:
// rs1_val==6148914691236517205 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5555555555555555, 0x1, x7, 440, x8)

inst_853:
// rs1_val==6148914691236517205 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x15045114, 0x5555555555555555, 0xb504f334, x7, 448, x8)

inst_854:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444445, 0x5555555555555555, 0x6666666666666667, x7, 456, x8)

inst_855:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111114, 0x5555555555555555, 0x3333333333333334, x7, 464, x8)

inst_856:
// rs1_val==6148914691236517205 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5555555555555555, 0x6, x7, 472, x8)

inst_857:
// rs1_val==6148914691236517205 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5555555555555555, 0xaaaaaaaaaaaaaaab, x7, 480, x8)

inst_858:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555554, 0x5555555555555555, 0x5555555555555556, x7, 488, x8)

inst_859:
// rs1_val==6148914691236517205 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x4, 0x5555555555555555, 0x4, x7, 496, x8)

inst_860:
// rs1_val==6148914691236517205 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x55555555, 0x5555555555555555, 0xffffffff, x7, 504, x8)

inst_861:
// rs1_val==6148914691236517205 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555555, 0x0, x7, 512, x8)

inst_862:
// rs1_val==6148914691236517205 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x15045110, 0x5555555555555555, 0xb504f332, x7, 520, x8)

inst_863:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444445, 0x5555555555555555, 0x6666666666666665, x7, 528, x8)

inst_864:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111110, 0x5555555555555555, 0x3333333333333332, x7, 536, x8)

inst_865:
// rs1_val==6148914691236517205 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5555555555555555, 0xaaaaaaaaaaaaaaa9, x7, 544, x8)

inst_866:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555554, 0x5555555555555555, 0x5555555555555554, x7, 552, x8)

inst_867:
// rs1_val==6148914691236517205 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555555, 0x2, x7, 560, x8)

inst_868:
// rs1_val==6148914691236517205 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x100000000, 0x5555555555555555, 0x100000000, x7, 568, x8)

inst_869:
// rs1_val==6148914691236517205 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x15045111, 0x5555555555555555, 0xb504f333, x7, 576, x8)

inst_870:
// rs1_val==6148914691236517205 and rs2_val==7378697629483820646, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x6666666666666666
TEST_RR_OP(andn, x31, x30, x29, 0x4444444444444444, 0x5555555555555555, 0x6666666666666666, x7, 584, x8)

inst_871:
// rs1_val==6148914691236517205 and rs2_val==3689348814741910323, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3333333333333333
TEST_RR_OP(andn, x31, x30, x29, 0x1111111111111111, 0x5555555555555555, 0x3333333333333333, x7, 592, x8)

inst_872:
// rs1_val==6148914691236517205 and rs2_val==5, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5
TEST_RR_OP(andn, x31, x30, x29, 0x5, 0x5555555555555555, 0x5, x7, 600, x8)

inst_873:
// rs1_val==6148914691236517205 and rs2_val==12297829382473034410, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0xaaaaaaaaaaaaaaaa
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x5555555555555555, 0xaaaaaaaaaaaaaaaa, x7, 608, x8)

inst_874:
// rs1_val==6148914691236517205 and rs2_val==6148914691236517205, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x5555555555555555
TEST_RR_OP(andn, x31, x30, x29, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, x7, 616, x8)

inst_875:
// rs1_val==6148914691236517205 and rs2_val==3, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x5555555555555555;  op2val:0x3
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x5555555555555555, 0x3, x7, 624, x8)

inst_876:
// rs1_val==3 and rs2_val==4294967297, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x100000001
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3, 0x100000001, x7, 632, x8)

inst_877:
// rs1_val==3 and rs2_val==1, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3, 0x1, x7, 640, x8)

inst_878:
// rs1_val==3 and rs2_val==3037000500, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xb504f334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3, 0xb504f334, x7, 648, x8)

inst_879:
// rs1_val==3 and rs2_val==7378697629483820647, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x6666666666666667
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x3, 0x6666666666666667, x7, 656, x8)

inst_880:
// rs1_val==3 and rs2_val==3689348814741910324, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x3333333333333334
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3, 0x3333333333333334, x7, 664, x8)

inst_881:
// rs1_val==3 and rs2_val==6, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x6
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3, 0x6, x7, 672, x8)

inst_882:
// rs1_val==3 and rs2_val==12297829382473034411, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xaaaaaaaaaaaaaaab
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x3, 0xaaaaaaaaaaaaaaab, x7, 680, x8)

inst_883:
// rs1_val==3 and rs2_val==6148914691236517206, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x5555555555555556
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3, 0x5555555555555556, x7, 688, x8)

inst_884:
// rs1_val==3 and rs2_val==4, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x4
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3, 0x4, x7, 696, x8)

inst_885:
// rs1_val==3 and rs2_val==4294967295, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x3, 0xffffffff, x7, 704, x8)

inst_886:
// rs1_val==3 and rs2_val==0, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x0
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3, 0x0, x7, 712, x8)

inst_887:
// rs1_val==3 and rs2_val==3037000498, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xb504f332
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3, 0xb504f332, x7, 720, x8)

inst_888:
// rs1_val==3 and rs2_val==7378697629483820645, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x6666666666666665
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3, 0x6666666666666665, x7, 728, x8)

inst_889:
// rs1_val==3 and rs2_val==3689348814741910322, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x3333333333333332
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3, 0x3333333333333332, x7, 736, x8)

inst_890:
// rs1_val==3 and rs2_val==12297829382473034409, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xaaaaaaaaaaaaaaa9
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x3, 0xaaaaaaaaaaaaaaa9, x7, 744, x8)

inst_891:
// rs1_val==3 and rs2_val==6148914691236517204, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x5555555555555554
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3, 0x5555555555555554, x7, 752, x8)

inst_892:
// rs1_val==3 and rs2_val==2, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x2
TEST_RR_OP(andn, x31, x30, x29, 0x2, 0x3, 0x2, x7, 760, x8)

inst_893:
// rs1_val==3 and rs2_val==4294967296, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x100000000
TEST_RR_OP(andn, x31, x30, x29, 0x0, 0x3, 0x100000000, x7, 768, x8)

inst_894:
// rs1_val==3 and rs2_val==3037000499, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0xb504f333
TEST_RR_OP(andn, x31, x30, x29, 0x3, 0x3, 0xb504f333, x7, 776, x8)

inst_895:
// rs1_val != rs2_val and rs1_val > 0 and rs2_val > 0, rs2_val == 1, rs1_val > 0 and rs2_val > 0, rs1_val==4294967297 and rs2_val==1
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0x1
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0x1, x7, 784, x8)

inst_896:
// rs2_val == 17293822569102704639, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xefffffffffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xefffffffffffffff, x7, 792, x8)

inst_897:
// rs2_val == 18446744056529682431, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffbffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xfffffffbffffffff, x7, 800, x8)

inst_898:
// rs2_val == 18446744069414584319, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xfffffffeffffffff
TEST_RR_OP(andn, x31, x30, x29, 0x1, 0x100000001, 0xfffffffeffffffff, x7, 808, x8)

inst_899:
// rs2_val == 18446744071562067967, 
// opcode: andn ; op1:x30; op2:x29; dest:x31; op1val:0x100000001;  op2val:0xffffffff7fffffff
TEST_RR_OP(andn, x31, x30, x29, 0x100000001, 0x100000001, 0xffffffff7fffffff, x7, 816, x8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 26*(XLEN/32),4,0xdeadbeef


signature_x7_0:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_1:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_2:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_3:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_4:
    .fill 256*(XLEN/32),4,0xdeadbeef


signature_x7_5:
    .fill 1*(XLEN/32),4,0xdeadbeef


signature_x7_6:
    .fill 103*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
