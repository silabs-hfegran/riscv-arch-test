
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.9
// timestamp : Mon Jan 24 09:42:21 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/rv64i_b.cgf \
 \
//                  -- xlen 64  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zext.h instruction of the RISC-V RV64B,RV64Zbb extension for the zext.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IB,RV64IZbb")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*B.*);def TEST_CASE_1=True;",zext.h)

RVTEST_CASE(1,"//check ISA:=regex(.*64.*);check ISA:=regex(.*I.*Zbb.*);def TEST_CASE_1=True;",zext.h)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rd, rs1==x30, rd==x31, rs1_val == 0, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x0;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x0, x1, 0, x2)

inst_1:
// rs1 == rd, rs1==x29, rd==x29, rs1_val == 9223372036854775808, 
// opcode: zext.h ; op1:x29; dest:x29; op1val:0x8000000000000000;
TEST_RD_OP(zext.h, x29, x29, 0x0000000000000000, 0x8000000000000000, x1, 8, x2)

inst_2:
// rs1==x31, rd==x30, rs1_val == 4611686018427387904, 
// opcode: zext.h ; op1:x31; dest:x30; op1val:0x4000000000000000;
TEST_RD_OP(zext.h, x30, x31, 0x0000000000000000, 0x4000000000000000, x1, 16, x2)

inst_3:
// rs1==x27, rd==x28, rs1_val == 2305843009213693952, 
// opcode: zext.h ; op1:x27; dest:x28; op1val:0x2000000000000000;
TEST_RD_OP(zext.h, x28, x27, 0x0000000000000000, 0x2000000000000000, x1, 24, x2)

inst_4:
// rs1==x28, rd==x27, rs1_val == 1152921504606846976, 
// opcode: zext.h ; op1:x28; dest:x27; op1val:0x1000000000000000;
TEST_RD_OP(zext.h, x27, x28, 0x0000000000000000, 0x1000000000000000, x1, 32, x2)

inst_5:
// rs1==x25, rd==x26, rs1_val == 576460752303423488, 
// opcode: zext.h ; op1:x25; dest:x26; op1val:0x800000000000000;
TEST_RD_OP(zext.h, x26, x25, 0x0000000000000000, 0x800000000000000, x1, 40, x2)

inst_6:
// rs1==x26, rd==x25, rs1_val == 288230376151711744, 
// opcode: zext.h ; op1:x26; dest:x25; op1val:0x400000000000000;
TEST_RD_OP(zext.h, x25, x26, 0x0000000000000000, 0x400000000000000, x1, 48, x2)

inst_7:
// rs1==x23, rd==x24, rs1_val == 144115188075855872, 
// opcode: zext.h ; op1:x23; dest:x24; op1val:0x200000000000000;
TEST_RD_OP(zext.h, x24, x23, 0x0000000000000000, 0x200000000000000, x1, 56, x2)

inst_8:
// rs1==x24, rd==x23, rs1_val == 72057594037927936, 
// opcode: zext.h ; op1:x24; dest:x23; op1val:0x100000000000000;
TEST_RD_OP(zext.h, x23, x24, 0x0000000000000000, 0x100000000000000, x1, 64, x2)

inst_9:
// rs1==x21, rd==x22, rs1_val == 36028797018963968, 
// opcode: zext.h ; op1:x21; dest:x22; op1val:0x80000000000000;
TEST_RD_OP(zext.h, x22, x21, 0x0000000000000000, 0x80000000000000, x1, 72, x2)

inst_10:
// rs1==x22, rd==x21, rs1_val == 18014398509481984, 
// opcode: zext.h ; op1:x22; dest:x21; op1val:0x40000000000000;
TEST_RD_OP(zext.h, x21, x22, 0x0000000000000000, 0x40000000000000, x1, 80, x2)

inst_11:
// rs1==x19, rd==x20, rs1_val == 9007199254740992, 
// opcode: zext.h ; op1:x19; dest:x20; op1val:0x20000000000000;
TEST_RD_OP(zext.h, x20, x19, 0x0000000000000000, 0x20000000000000, x1, 88, x2)

inst_12:
// rs1==x20, rd==x19, rs1_val == 4503599627370496, 
// opcode: zext.h ; op1:x20; dest:x19; op1val:0x10000000000000;
TEST_RD_OP(zext.h, x19, x20, 0x0000000000000000, 0x10000000000000, x1, 96, x2)

inst_13:
// rs1==x17, rd==x18, rs1_val == 2251799813685248, 
// opcode: zext.h ; op1:x17; dest:x18; op1val:0x8000000000000;
TEST_RD_OP(zext.h, x18, x17, 0x0000000000000000, 0x8000000000000, x1, 104, x2)

inst_14:
// rs1==x18, rd==x17, rs1_val == 1125899906842624, 
// opcode: zext.h ; op1:x18; dest:x17; op1val:0x4000000000000;
TEST_RD_OP(zext.h, x17, x18, 0x0000000000000000, 0x4000000000000, x1, 112, x2)

inst_15:
// rs1==x15, rd==x16, rs1_val == 562949953421312, 
// opcode: zext.h ; op1:x15; dest:x16; op1val:0x2000000000000;
TEST_RD_OP(zext.h, x16, x15, 0x0000000000000000, 0x2000000000000, x1, 120, x2)

inst_16:
// rs1==x16, rd==x15, rs1_val == 281474976710656, 
// opcode: zext.h ; op1:x16; dest:x15; op1val:0x1000000000000;
TEST_RD_OP(zext.h, x15, x16, 0x0000000000000000, 0x1000000000000, x1, 128, x2)

inst_17:
// rs1==x13, rd==x14, rs1_val == 140737488355328, 
// opcode: zext.h ; op1:x13; dest:x14; op1val:0x800000000000;
TEST_RD_OP(zext.h, x14, x13, 0x0000000000000000, 0x800000000000, x1, 136, x2)

inst_18:
// rs1==x14, rd==x13, rs1_val == 70368744177664, 
// opcode: zext.h ; op1:x14; dest:x13; op1val:0x400000000000;
TEST_RD_OP(zext.h, x13, x14, 0x0000000000000000, 0x400000000000, x1, 144, x2)

inst_19:
// rs1==x11, rd==x12, rs1_val == 35184372088832, 
// opcode: zext.h ; op1:x11; dest:x12; op1val:0x200000000000;
TEST_RD_OP(zext.h, x12, x11, 0x0000000000000000, 0x200000000000, x1, 152, x2)

inst_20:
// rs1==x12, rd==x11, rs1_val == 17592186044416, 
// opcode: zext.h ; op1:x12; dest:x11; op1val:0x100000000000;
TEST_RD_OP(zext.h, x11, x12, 0x0000000000000000, 0x100000000000, x1, 160, x2)

inst_21:
// rs1==x9, rd==x10, rs1_val == 8796093022208, 
// opcode: zext.h ; op1:x9; dest:x10; op1val:0x80000000000;
TEST_RD_OP(zext.h, x10, x9, 0x0000000000000000, 0x80000000000, x1, 168, x2)

inst_22:
// rs1==x10, rd==x9, rs1_val == 4398046511104, 
// opcode: zext.h ; op1:x10; dest:x9; op1val:0x40000000000;
TEST_RD_OP(zext.h, x9, x10, 0x0000000000000000, 0x40000000000, x1, 176, x2)

inst_23:
// rs1==x7, rd==x8, rs1_val == 2199023255552, 
// opcode: zext.h ; op1:x7; dest:x8; op1val:0x20000000000;
TEST_RD_OP(zext.h, x8, x7, 0x0000000000000000, 0x20000000000, x1, 184, x2)

inst_24:
// rs1==x8, rd==x7, rs1_val == 1099511627776, 
// opcode: zext.h ; op1:x8; dest:x7; op1val:0x10000000000;
TEST_RD_OP(zext.h, x7, x8, 0x0000000000000000, 0x10000000000, x1, 192, x2)

inst_25:
// rs1==x5, rd==x6, rs1_val == 549755813888, 
// opcode: zext.h ; op1:x5; dest:x6; op1val:0x8000000000;
TEST_RD_OP(zext.h, x6, x5, 0x0000000000000000, 0x8000000000, x1, 200, x2)

inst_26:
// rs1==x6, rd==x5, rs1_val == 274877906944, 
// opcode: zext.h ; op1:x6; dest:x5; op1val:0x4000000000;
TEST_RD_OP(zext.h, x5, x6, 0x0000000000000000, 0x4000000000, x1, 208, x7)

inst_27:
// rs1==x3, rd==x4, rs1_val == 137438953472, 
// opcode: zext.h ; op1:x3; dest:x4; op1val:0x2000000000;
TEST_RD_OP(zext.h, x4, x3, 0x0000000000000000, 0x2000000000, x1, 216, x7)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_28:
// rs1==x4, rd==x3, rs1_val == 68719476736, 
// opcode: zext.h ; op1:x4; dest:x3; op1val:0x1000000000;
TEST_RD_OP(zext.h, x3, x4, 0x0000000000000000, 0x1000000000, x5, 0, x7)

inst_29:
// rs1==x1, rd==x2, rs1_val == 34359738368, 
// opcode: zext.h ; op1:x1; dest:x2; op1val:0x800000000;
TEST_RD_OP(zext.h, x2, x1, 0x0000000000000000, 0x800000000, x5, 8, x7)

inst_30:
// rs1==x2, rd==x1, rs1_val == 17179869184, 
// opcode: zext.h ; op1:x2; dest:x1; op1val:0x400000000;
TEST_RD_OP(zext.h, x1, x2, 0x0000000000000000, 0x400000000, x5, 16, x7)

inst_31:
// rs1==x0, rs1_val == 8589934592, 
// opcode: zext.h ; op1:x0; dest:x31; op1val:0x0;
TEST_RD_OP(zext.h, x31, x0, 0x0000000000000000, 0x0, x5, 24, x7)

inst_32:
// rd==x0, rs1_val == 4294967296, 
// opcode: zext.h ; op1:x31; dest:x0; op1val:0x100000000;
TEST_RD_OP(zext.h, x0, x31, 0x0000000000000000, 0x100000000, x5, 32, x7)

inst_33:
// rs1_val == 2147483648, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x80000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x80000000, x5, 40, x7)

inst_34:
// rs1_val == 1073741824, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x40000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x40000000, x5, 48, x7)

inst_35:
// rs1_val == 1, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x1;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x1, x5, 56, x7)

inst_36:
// rs1_val == 65408, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0xff80;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0xff80, x5, 64, x7)

inst_37:
// rs1_val == 536870912, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x20000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x20000000, x5, 72, x7)

inst_38:
// rs1_val == 268435456, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x10000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x10000000, x5, 80, x7)

inst_39:
// rs1_val == 134217728, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x8000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x8000000, x5, 88, x7)

inst_40:
// rs1_val == 67108864, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x4000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x4000000, x5, 96, x7)

inst_41:
// rs1_val == 33554432, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x2000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x2000000, x5, 104, x7)

inst_42:
// rs1_val == 16777216, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x1000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x1000000, x5, 112, x7)

inst_43:
// rs1_val == 8388608, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x800000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x800000, x5, 120, x7)

inst_44:
// rs1_val == 4194304, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x400000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x400000, x5, 128, x7)

inst_45:
// rs1_val == 2097152, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x200000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x200000, x5, 136, x7)

inst_46:
// rs1_val == 1048576, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x100000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x100000, x5, 144, x7)

inst_47:
// rs1_val == 524288, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x80000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x80000, x5, 152, x7)

inst_48:
// rs1_val == 262144, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x40000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x40000, x5, 160, x7)

inst_49:
// rs1_val == 131072, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x20000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x20000, x5, 168, x7)

inst_50:
// rs1_val == 65536, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x10000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x10000, x5, 176, x7)

inst_51:
// rs1_val == 32768, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x8000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x8000, x5, 184, x7)

inst_52:
// rs1_val == 16384, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x4000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x4000, x5, 192, x7)

inst_53:
// rs1_val == 8192, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x2000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x2000, x5, 200, x7)

inst_54:
// rs1_val == 4096, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x1000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x1000, x5, 208, x7)

inst_55:
// rs1_val == 2048, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x800;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x800, x5, 216, x7)

inst_56:
// rs1_val == 1024, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x400;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x400, x5, 224, x7)

inst_57:
// rs1_val == 512, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x200;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x200, x5, 232, x7)

inst_58:
// rs1_val == 256, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x100;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x100, x5, 240, x7)

inst_59:
// rs1_val == 128, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x80;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x80, x5, 248, x7)

inst_60:
// rs1_val == 64, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x40;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x40, x5, 256, x7)

inst_61:
// rs1_val == 32, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x20;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x20, x5, 264, x7)

inst_62:
// rs1_val == 16, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x10;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x10, x5, 272, x7)

inst_63:
// rs1_val == 8, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x8;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x8, x5, 280, x7)

inst_64:
// rs1_val == 4, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x4;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x4, x5, 288, x7)

inst_65:
// rs1_val == 2, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x2;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x2, x5, 296, x7)

inst_66:
// rs1_val == 8589934592, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x200000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x200000000, x5, 304, x7)

inst_67:
// rs1_val == 4294967296, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x100000000;
TEST_RD_OP(zext.h, x31, x30, 0x0000000000000000, 0x100000000, x5, 312, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 40*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
