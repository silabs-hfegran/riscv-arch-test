
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.9
// timestamp : Mon Jan 24 09:42:02 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/rv32i_b.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the zext.h instruction of the RISC-V RV32B,RV32Zbb extension for the zext.h covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IB,RV32IZbb")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*B.*);def TEST_CASE_1=True;",zext.h)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zbb.*);def TEST_CASE_1=True;",zext.h)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rd, rs1==x31, rd==x31, rs1_val == 0, 
// opcode: zext.h ; op1:x31; dest:x31; op1val:0x0;
TEST_RD_OP(zext.h, x31, x31, 0x00000000, 0x0, x1, 0, x2)

inst_1:
// rs1 != rd, rs1==x29, rd==x30, rs1_val == 2147483648, 
// opcode: zext.h ; op1:x29; dest:x30; op1val:0x80000000;
TEST_RD_OP(zext.h, x30, x29, 0x00000000, 0x80000000, x1, 4, x2)

inst_2:
// rs1==x30, rd==x29, rs1_val == 1073741824, 
// opcode: zext.h ; op1:x30; dest:x29; op1val:0x40000000;
TEST_RD_OP(zext.h, x29, x30, 0x00000000, 0x40000000, x1, 8, x2)

inst_3:
// rs1==x27, rd==x28, rs1_val == 536870912, 
// opcode: zext.h ; op1:x27; dest:x28; op1val:0x20000000;
TEST_RD_OP(zext.h, x28, x27, 0x00000000, 0x20000000, x1, 12, x2)

inst_4:
// rs1==x28, rd==x27, rs1_val == 268435456, 
// opcode: zext.h ; op1:x28; dest:x27; op1val:0x10000000;
TEST_RD_OP(zext.h, x27, x28, 0x00000000, 0x10000000, x1, 16, x2)

inst_5:
// rs1==x25, rd==x26, rs1_val == 134217728, 
// opcode: zext.h ; op1:x25; dest:x26; op1val:0x8000000;
TEST_RD_OP(zext.h, x26, x25, 0x00000000, 0x8000000, x1, 20, x2)

inst_6:
// rs1==x26, rd==x25, rs1_val == 67108864, 
// opcode: zext.h ; op1:x26; dest:x25; op1val:0x4000000;
TEST_RD_OP(zext.h, x25, x26, 0x00000000, 0x4000000, x1, 24, x2)

inst_7:
// rs1==x23, rd==x24, rs1_val == 33554432, 
// opcode: zext.h ; op1:x23; dest:x24; op1val:0x2000000;
TEST_RD_OP(zext.h, x24, x23, 0x00000000, 0x2000000, x1, 28, x2)

inst_8:
// rs1==x24, rd==x23, rs1_val == 16777216, 
// opcode: zext.h ; op1:x24; dest:x23; op1val:0x1000000;
TEST_RD_OP(zext.h, x23, x24, 0x00000000, 0x1000000, x1, 32, x2)

inst_9:
// rs1==x21, rd==x22, rs1_val == 8388608, 
// opcode: zext.h ; op1:x21; dest:x22; op1val:0x800000;
TEST_RD_OP(zext.h, x22, x21, 0x00000000, 0x800000, x1, 36, x2)

inst_10:
// rs1==x22, rd==x21, rs1_val == 4194304, 
// opcode: zext.h ; op1:x22; dest:x21; op1val:0x400000;
TEST_RD_OP(zext.h, x21, x22, 0x00000000, 0x400000, x1, 40, x2)

inst_11:
// rs1==x19, rd==x20, rs1_val == 2097152, 
// opcode: zext.h ; op1:x19; dest:x20; op1val:0x200000;
TEST_RD_OP(zext.h, x20, x19, 0x00000000, 0x200000, x1, 44, x2)

inst_12:
// rs1==x20, rd==x19, rs1_val == 1048576, 
// opcode: zext.h ; op1:x20; dest:x19; op1val:0x100000;
TEST_RD_OP(zext.h, x19, x20, 0x00000000, 0x100000, x1, 48, x2)

inst_13:
// rs1==x17, rd==x18, rs1_val == 524288, 
// opcode: zext.h ; op1:x17; dest:x18; op1val:0x80000;
TEST_RD_OP(zext.h, x18, x17, 0x00000000, 0x80000, x1, 52, x2)

inst_14:
// rs1==x18, rd==x17, rs1_val == 262144, 
// opcode: zext.h ; op1:x18; dest:x17; op1val:0x40000;
TEST_RD_OP(zext.h, x17, x18, 0x00000000, 0x40000, x1, 56, x2)

inst_15:
// rs1==x15, rd==x16, rs1_val == 131072, 
// opcode: zext.h ; op1:x15; dest:x16; op1val:0x20000;
TEST_RD_OP(zext.h, x16, x15, 0x00000000, 0x20000, x1, 60, x2)

inst_16:
// rs1==x16, rd==x15, rs1_val == 65536, 
// opcode: zext.h ; op1:x16; dest:x15; op1val:0x10000;
TEST_RD_OP(zext.h, x15, x16, 0x00000000, 0x10000, x1, 64, x2)

inst_17:
// rs1==x13, rd==x14, rs1_val == 32768, 
// opcode: zext.h ; op1:x13; dest:x14; op1val:0x8000;
TEST_RD_OP(zext.h, x14, x13, 0x00000000, 0x8000, x1, 68, x2)

inst_18:
// rs1==x14, rd==x13, rs1_val == 16384, 
// opcode: zext.h ; op1:x14; dest:x13; op1val:0x4000;
TEST_RD_OP(zext.h, x13, x14, 0x00000000, 0x4000, x1, 72, x2)

inst_19:
// rs1==x11, rd==x12, rs1_val == 1, 
// opcode: zext.h ; op1:x11; dest:x12; op1val:0x1;
TEST_RD_OP(zext.h, x12, x11, 0x00000000, 0x1, x1, 76, x2)

inst_20:
// rs1==x12, rd==x11, rs1_val == 65408, 
// opcode: zext.h ; op1:x12; dest:x11; op1val:0xff80;
TEST_RD_OP(zext.h, x11, x12, 0x00000000, 0xff80, x1, 80, x2)

inst_21:
// rs1==x9, rd==x10, rs1_val == 8192, 
// opcode: zext.h ; op1:x9; dest:x10; op1val:0x2000;
TEST_RD_OP(zext.h, x10, x9, 0x00000000, 0x2000, x1, 84, x2)

inst_22:
// rs1==x10, rd==x9, rs1_val == 4096, 
// opcode: zext.h ; op1:x10; dest:x9; op1val:0x1000;
TEST_RD_OP(zext.h, x9, x10, 0x00000000, 0x1000, x1, 88, x2)

inst_23:
// rs1==x7, rd==x8, rs1_val == 2048, 
// opcode: zext.h ; op1:x7; dest:x8; op1val:0x800;
TEST_RD_OP(zext.h, x8, x7, 0x00000000, 0x800, x1, 92, x2)

inst_24:
// rs1==x8, rd==x7, rs1_val == 1024, 
// opcode: zext.h ; op1:x8; dest:x7; op1val:0x400;
TEST_RD_OP(zext.h, x7, x8, 0x00000000, 0x400, x1, 96, x2)

inst_25:
// rs1==x5, rd==x6, rs1_val == 512, 
// opcode: zext.h ; op1:x5; dest:x6; op1val:0x200;
TEST_RD_OP(zext.h, x6, x5, 0x00000000, 0x200, x1, 100, x2)

inst_26:
// rs1==x6, rd==x5, rs1_val == 256, 
// opcode: zext.h ; op1:x6; dest:x5; op1val:0x100;
TEST_RD_OP(zext.h, x5, x6, 0x00000000, 0x100, x1, 104, x7)

inst_27:
// rs1==x3, rd==x4, rs1_val == 128, 
// opcode: zext.h ; op1:x3; dest:x4; op1val:0x80;
TEST_RD_OP(zext.h, x4, x3, 0x00000000, 0x80, x1, 108, x7)
RVTEST_SIGBASE(x5,signature_x5_0)

inst_28:
// rs1==x4, rd==x3, rs1_val == 64, 
// opcode: zext.h ; op1:x4; dest:x3; op1val:0x40;
TEST_RD_OP(zext.h, x3, x4, 0x00000000, 0x40, x5, 0, x7)

inst_29:
// rs1==x1, rd==x2, rs1_val == 32, 
// opcode: zext.h ; op1:x1; dest:x2; op1val:0x20;
TEST_RD_OP(zext.h, x2, x1, 0x00000000, 0x20, x5, 4, x7)

inst_30:
// rs1==x2, rd==x1, rs1_val == 16, 
// opcode: zext.h ; op1:x2; dest:x1; op1val:0x10;
TEST_RD_OP(zext.h, x1, x2, 0x00000000, 0x10, x5, 8, x7)

inst_31:
// rs1==x0, rs1_val == 8, 
// opcode: zext.h ; op1:x0; dest:x31; op1val:0x0;
TEST_RD_OP(zext.h, x31, x0, 0x00000000, 0x0, x5, 12, x7)

inst_32:
// rd==x0, rs1_val == 4, 
// opcode: zext.h ; op1:x31; dest:x0; op1val:0x4;
TEST_RD_OP(zext.h, x0, x31, 0x00000000, 0x4, x5, 16, x7)

inst_33:
// rs1_val == 2, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x2;
TEST_RD_OP(zext.h, x31, x30, 0x00000000, 0x2, x5, 20, x7)

inst_34:
// rs1_val == 8, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x8;
TEST_RD_OP(zext.h, x31, x30, 0x00000000, 0x8, x5, 24, x7)

inst_35:
// rs1_val == 4, 
// opcode: zext.h ; op1:x30; dest:x31; op1val:0x4;
TEST_RD_OP(zext.h, x31, x30, 0x00000000, 0x4, x5, 28, x7)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 28*(XLEN/32),4,0xdeadbeef


signature_x5_0:
    .fill 8*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
